(function() {var implementors = {};
implementors["openmls"] = [{"text":"impl Error for ErrorString","synthetic":false,"types":[]},{"text":"impl Error for ErrorPayload","synthetic":false,"types":[]},{"text":"impl Error for HKDFError","synthetic":false,"types":[]},{"text":"impl Error for CryptoError","synthetic":false,"types":[]},{"text":"impl Error for CodecError","synthetic":false,"types":[]},{"text":"impl Error for ConfigError","synthetic":false,"types":[]},{"text":"impl Error for CredentialError","synthetic":false,"types":[]},{"text":"impl Error for ExtensionError","synthetic":false,"types":[]},{"text":"impl Error for LifetimeExtensionError","synthetic":false,"types":[]},{"text":"impl Error for CapabilitiesExtensionError","synthetic":false,"types":[]},{"text":"impl Error for KeyPackageIdError","synthetic":false,"types":[]},{"text":"impl Error for ParentHashError","synthetic":false,"types":[]},{"text":"impl Error for RatchetTreeError","synthetic":false,"types":[]},{"text":"impl Error for InvalidExtensionError","synthetic":false,"types":[]},{"text":"impl Error for MLSPlaintextError","synthetic":false,"types":[]},{"text":"impl Error for MLSCiphertextError","synthetic":false,"types":[]},{"text":"impl Error for GroupError","synthetic":false,"types":[]},{"text":"impl Error for WelcomeError","synthetic":false,"types":[]},{"text":"impl Error for ApplyCommitError","synthetic":false,"types":[]},{"text":"impl Error for CreateCommitError","synthetic":false,"types":[]},{"text":"impl Error for ExporterError","synthetic":false,"types":[]},{"text":"impl Error for ManagedGroupError","synthetic":false,"types":[]},{"text":"impl Error for UseAfterEviction","synthetic":false,"types":[]},{"text":"impl Error for PendingProposalsError","synthetic":false,"types":[]},{"text":"impl Error for InvalidMessageError","synthetic":false,"types":[]},{"text":"impl Error for KeyPackageError","synthetic":false,"types":[]},{"text":"impl Error for ProposalQueueError","synthetic":false,"types":[]},{"text":"impl Error for ProposalOrRefTypeError","synthetic":false,"types":[]},{"text":"impl Error for QueuedProposalError","synthetic":false,"types":[]},{"text":"impl Error for TreeError","synthetic":false,"types":[]},{"text":"impl Error for SecretTypeError","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()