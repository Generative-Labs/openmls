(function() {var implementors = {};
implementors["openmls"] = [{"text":"impl TlsSize for <a class=\"struct\" href=\"openmls/ciphersuite/struct.Signature.html\" title=\"struct openmls::ciphersuite::Signature\">Signature</a>","synthetic":false,"types":["openmls::ciphersuite::Signature"]},{"text":"impl TlsSize for <a class=\"struct\" href=\"openmls/prelude/struct.KeyPackage.html\" title=\"struct openmls::prelude::KeyPackage\">KeyPackage</a>","synthetic":false,"types":["openmls::key_packages::KeyPackage"]},{"text":"impl TlsSize for <a class=\"struct\" href=\"openmls/tree/node/struct.ParentNode.html\" title=\"struct openmls::tree::node::ParentNode\">ParentNode</a>","synthetic":false,"types":["openmls::tree::node::ParentNode"]},{"text":"impl&lt;'a&gt; TlsSize for <a class=\"struct\" href=\"openmls/tree/struct.ParentNodeTreeHashInput.html\" title=\"struct openmls::tree::ParentNodeTreeHashInput\">ParentNodeTreeHashInput</a>&lt;'a&gt;","synthetic":false,"types":["openmls::tree::hashes::ParentNodeTreeHashInput"]},{"text":"impl&lt;'a&gt; TlsSize for <a class=\"struct\" href=\"openmls/tree/struct.LeafNodeHashInput.html\" title=\"struct openmls::tree::LeafNodeHashInput\">LeafNodeHashInput</a>&lt;'a&gt;","synthetic":false,"types":["openmls::tree::hashes::LeafNodeHashInput"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()