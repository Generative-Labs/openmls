(function() {var implementors = {};
implementors["openmls"] = [{"text":"impl&lt;'_&gt; From&lt;&amp;'_ CiphersuiteName&gt; for u16","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;u8&gt;&gt; for Secret","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ [u8]&gt; for Secret","synthetic":false,"types":[]},{"text":"impl From&lt;ConfigError&gt; for SignatureError","synthetic":false,"types":[]},{"text":"impl From&lt;ConfigError&gt; for CodecError","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for CodecError","synthetic":false,"types":[]},{"text":"impl From&lt;CodecError&gt; for ConfigError","synthetic":false,"types":[]},{"text":"impl From&lt;ConfigError&gt; for CredentialError","synthetic":false,"types":[]},{"text":"impl From&lt;MLSCredentialType&gt; for Credential","synthetic":false,"types":[]},{"text":"impl From&lt;ExtensionError&gt; for ConfigError","synthetic":false,"types":[]},{"text":"impl From&lt;ExtensionError&gt; for CodecError","synthetic":false,"types":[]},{"text":"impl From&lt;u8&gt; for SenderType","synthetic":false,"types":[]},{"text":"impl From&lt;u8&gt; for ContentType","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ MLSPlaintextContentType&gt; for ContentType","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ MLSPlaintext&gt; for MLSPlaintextCommitContent","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ MLSPlaintext&gt; for MLSPlaintextCommitAuthData","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ ConfirmationTag&gt; for MLSPlaintextCommitAuthData","synthetic":false,"types":[]},{"text":"impl From&lt;MLSCiphertextError&gt; for DecryptionError","synthetic":false,"types":[]},{"text":"impl From&lt;TreeError&gt; for WelcomeError","synthetic":false,"types":[]},{"text":"impl From&lt;ConfigError&gt; for ApplyCommitError","synthetic":false,"types":[]},{"text":"impl From&lt;ExtensionError&gt; for ApplyCommitError","synthetic":false,"types":[]},{"text":"impl From&lt;ConfigError&gt; for WelcomeError","synthetic":false,"types":[]},{"text":"impl From&lt;CodecError&gt; for GroupError","synthetic":false,"types":[]},{"text":"impl From&lt;CodecError&gt; for GroupError","synthetic":false,"types":[]},{"text":"impl From&lt;ExtensionError&gt; for KeyPackageError","synthetic":false,"types":[]},{"text":"impl From&lt;u8&gt; for ProposalType","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for NodeIndex","synthetic":false,"types":[]},{"text":"impl From&lt;usize&gt; for NodeIndex","synthetic":false,"types":[]},{"text":"impl From&lt;LeafIndex&gt; for NodeIndex","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for LeafIndex","synthetic":false,"types":[]},{"text":"impl From&lt;usize&gt; for LeafIndex","synthetic":false,"types":[]},{"text":"impl From&lt;NodeIndex&gt; for LeafIndex","synthetic":false,"types":[]},{"text":"impl From&lt;u8&gt; for NodeType","synthetic":false,"types":[]},{"text":"impl From&lt;ConfigError&gt; for TreeError","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()