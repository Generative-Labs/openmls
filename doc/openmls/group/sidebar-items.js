initSidebarItems({"enum":[["EmptyInputError",""],["IncomingWireFormatPolicy","Defines what wire format is acceptable for incoming handshake messages. Note that application messages must always be encrypted."],["InnerState","`Enum` that indicates whether the inner group state has been modified since the last time it was persisted. `InnerState::Changed` indicates that the state has changed and that [`.save()`] should be called. `InnerState::Persisted` indicates that the state has not been modified and therefore doesnâ€™t need to be persisted."],["InvalidMessageError",""],["MlsGroupError",""],["MlsGroupState","[`MlsGroupState`] determines the state of an [`MlsGroup`]. The different states and their transitions are as follows:"],["OutgoingWireFormatPolicy","Defines what wire format should be used for outgoing handshake messages. Note that application messages must always be encrypted."],["PendingCommitState",""],["PendingProposalsError",""],["UseAfterEviction",""]],"mod":[["config",""],["errors","MLS CoreGroup errors"],["errors","MLS MlsGroup errors"],["processing",""]],"struct":[["ALL_VALID_WIRE_FORMAT_POLICIES",""],["GroupEpoch",""],["GroupId",""],["MIXED_CIPHERTEXT_WIRE_FORMAT_POLICY",""],["MIXED_PLAINTEXT_WIRE_FORMAT_POLICY",""],["MlsGroup","A `MlsGroup` represents an [CoreGroup] with an easier, high-level API designed to be used in production. The API exposes high level functions to manage a group by adding/removing members, get the current member list, etc."],["MlsGroupConfig","Specifies the configuration parameters for a [`MlsGroup`]"],["MlsGroupConfigBuilder",""],["PURE_CIPHERTEXT_WIRE_FORMAT_POLICY",""],["PURE_PLAINTEXT_WIRE_FORMAT_POLICY",""],["WireFormatPolicy","Defines what wire format is desired for outgoing handshake messages. Note that application messages must always be encrypted."]]});