<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="773.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="773.00"> </text><svg id="frames" x="10" width="1180"><g><title>openmls::tree::RatchetTree::apply_proposals (1 samples, 0.84%)</title><rect x="1.6807%" y="421" width="0.8403%" height="15" fill="rgb(215,228,26)"/><text x="1.9307%" y="431.50"></text></g><g><title>openmls::tree::RatchetTree::add_nodes (1 samples, 0.84%)</title><rect x="1.6807%" y="405" width="0.8403%" height="15" fill="rgb(218,107,38)"/><text x="1.9307%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.84%)</title><rect x="1.6807%" y="389" width="0.8403%" height="15" fill="rgb(246,159,42)"/><text x="1.9307%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.84%)</title><rect x="1.6807%" y="373" width="0.8403%" height="15" fill="rgb(251,23,41)"/><text x="1.9307%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.84%)</title><rect x="1.6807%" y="357" width="0.8403%" height="15" fill="rgb(246,94,53)"/><text x="1.9307%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.84%)</title><rect x="1.6807%" y="341" width="0.8403%" height="15" fill="rgb(241,212,46)"/><text x="1.9307%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.84%)</title><rect x="1.6807%" y="325" width="0.8403%" height="15" fill="rgb(231,79,30)"/><text x="1.9307%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.84%)</title><rect x="1.6807%" y="309" width="0.8403%" height="15" fill="rgb(208,202,21)"/><text x="1.9307%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.84%)</title><rect x="1.6807%" y="293" width="0.8403%" height="15" fill="rgb(226,136,22)"/><text x="1.9307%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.84%)</title><rect x="1.6807%" y="277" width="0.8403%" height="15" fill="rgb(214,87,0)"/><text x="1.9307%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.84%)</title><rect x="1.6807%" y="261" width="0.8403%" height="15" fill="rgb(239,176,44)"/><text x="1.9307%" y="271.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.84%)</title><rect x="1.6807%" y="245" width="0.8403%" height="15" fill="rgb(230,102,31)"/><text x="1.9307%" y="255.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.84%)</title><rect x="1.6807%" y="229" width="0.8403%" height="15" fill="rgb(219,40,19)"/><text x="1.9307%" y="239.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.84%)</title><rect x="1.6807%" y="213" width="0.8403%" height="15" fill="rgb(228,55,4)"/><text x="1.9307%" y="223.50"></text></g><g><title>_int_realloc (1 samples, 0.84%)</title><rect x="1.6807%" y="197" width="0.8403%" height="15" fill="rgb(239,120,21)"/><text x="1.9307%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.84%)</title><rect x="1.6807%" y="181" width="0.8403%" height="15" fill="rgb(243,136,1)"/><text x="1.9307%" y="191.50"></text></g><g><title>openmls::group::mls_group::MlsGroup::apply_commit (2 samples, 1.68%)</title><rect x="1.6807%" y="453" width="1.6807%" height="15" fill="rgb(237,12,45)"/><text x="1.9307%" y="463.50"></text></g><g><title>openmls::group::mls_group::apply_commit::&lt;impl openmls::group::mls_group::MlsGroup&gt;::apply_commit_internal (2 samples, 1.68%)</title><rect x="1.6807%" y="437" width="1.6807%" height="15" fill="rgb(245,142,47)"/><text x="1.9307%" y="447.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash (1 samples, 0.84%)</title><rect x="2.5210%" y="421" width="0.8403%" height="15" fill="rgb(237,24,54)"/><text x="2.7710%" y="431.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.84%)</title><rect x="2.5210%" y="405" width="0.8403%" height="15" fill="rgb(234,164,40)"/><text x="2.7710%" y="415.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.84%)</title><rect x="2.5210%" y="389" width="0.8403%" height="15" fill="rgb(242,95,12)"/><text x="2.7710%" y="399.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.84%)</title><rect x="2.5210%" y="373" width="0.8403%" height="15" fill="rgb(238,75,28)"/><text x="2.7710%" y="383.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.84%)</title><rect x="2.5210%" y="357" width="0.8403%" height="15" fill="rgb(236,4,26)"/><text x="2.7710%" y="367.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.84%)</title><rect x="2.5210%" y="341" width="0.8403%" height="15" fill="rgb(252,158,20)"/><text x="2.7710%" y="351.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.84%)</title><rect x="2.5210%" y="325" width="0.8403%" height="15" fill="rgb(231,67,31)"/><text x="2.7710%" y="335.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.84%)</title><rect x="2.5210%" y="309" width="0.8403%" height="15" fill="rgb(241,151,13)"/><text x="2.7710%" y="319.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.84%)</title><rect x="2.5210%" y="293" width="0.8403%" height="15" fill="rgb(242,25,36)"/><text x="2.7710%" y="303.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.84%)</title><rect x="2.5210%" y="277" width="0.8403%" height="15" fill="rgb(205,222,34)"/><text x="2.7710%" y="287.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.84%)</title><rect x="2.5210%" y="261" width="0.8403%" height="15" fill="rgb(235,154,26)"/><text x="2.7710%" y="271.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.84%)</title><rect x="2.5210%" y="245" width="0.8403%" height="15" fill="rgb(233,17,9)"/><text x="2.7710%" y="255.50"></text></g><g><title>openmls::tree::hashes::LeafNodeHashInput::hash (1 samples, 0.84%)</title><rect x="2.5210%" y="229" width="0.8403%" height="15" fill="rgb(245,113,50)"/><text x="2.7710%" y="239.50"></text></g><g><title>openmls::ciphersuite::Ciphersuite::hash (1 samples, 0.84%)</title><rect x="2.5210%" y="213" width="0.8403%" height="15" fill="rgb(247,105,34)"/><text x="2.7710%" y="223.50"></text></g><g><title>evercrypt::digest::hash (1 samples, 0.84%)</title><rect x="2.5210%" y="197" width="0.8403%" height="15" fill="rgb(225,50,23)"/><text x="2.7710%" y="207.50"></text></g><g><title>EverCrypt_Hash_hash_256 (1 samples, 0.84%)</title><rect x="2.5210%" y="181" width="0.8403%" height="15" fill="rgb(253,189,32)"/><text x="2.7710%" y="191.50"></text></g><g><title>EverCrypt_Hash_update_last_256 (1 samples, 0.84%)</title><rect x="2.5210%" y="165" width="0.8403%" height="15" fill="rgb(208,159,41)"/><text x="2.7710%" y="175.50"></text></g><g><title>Hacl_Hash_SHA2_update_multi_256 (1 samples, 0.84%)</title><rect x="2.5210%" y="149" width="0.8403%" height="15" fill="rgb(222,135,10)"/><text x="2.7710%" y="159.50"></text></g><g><title>Hacl_Hash_Core_SHA2_update_224 (1 samples, 0.84%)</title><rect x="2.5210%" y="133" width="0.8403%" height="15" fill="rgb(214,75,20)"/><text x="2.7710%" y="143.50"></text></g><g><title>openmls::codec::Codec::encode_detached (1 samples, 0.84%)</title><rect x="3.3613%" y="373" width="0.8403%" height="15" fill="rgb(231,65,33)"/><text x="3.6113%" y="383.50"></text></g><g><title>openmls::framing::codec::&lt;impl openmls::codec::Codec for openmls::framing::plaintext::MlsPlaintextTbs&gt;::encode (1 samples, 0.84%)</title><rect x="3.3613%" y="357" width="0.8403%" height="15" fill="rgb(251,139,6)"/><text x="3.6113%" y="367.50"></text></g><g><title>openmls::group::codec::&lt;impl openmls::codec::Codec for openmls::group::GroupId&gt;::encode (1 samples, 0.84%)</title><rect x="3.3613%" y="341" width="0.8403%" height="15" fill="rgb(225,220,53)"/><text x="3.6113%" y="351.50"></text></g><g><title>openmls::codec::encode_vec (1 samples, 0.84%)</title><rect x="3.3613%" y="325" width="0.8403%" height="15" fill="rgb(244,73,26)"/><text x="3.6113%" y="335.50"></text></g><g><title>&lt;u8 as openmls::codec::Codec&gt;::encode (1 samples, 0.84%)</title><rect x="3.3613%" y="309" width="0.8403%" height="15" fill="rgb(244,98,34)"/><text x="3.6113%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.84%)</title><rect x="3.3613%" y="293" width="0.8403%" height="15" fill="rgb(211,131,5)"/><text x="3.6113%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.84%)</title><rect x="3.3613%" y="277" width="0.8403%" height="15" fill="rgb(238,14,50)"/><text x="3.6113%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.84%)</title><rect x="3.3613%" y="261" width="0.8403%" height="15" fill="rgb(206,132,52)"/><text x="3.6113%" y="271.50"></text></g><g><title>Hacl_Impl_Ed25519_PointCompress_point_compress (1 samples, 0.84%)</title><rect x="4.2017%" y="261" width="0.8403%" height="15" fill="rgb(228,200,17)"/><text x="4.4517%" y="271.50"></text></g><g><title>reduce (1 samples, 0.84%)</title><rect x="4.2017%" y="245" width="0.8403%" height="15" fill="rgb(209,53,28)"/><text x="4.4517%" y="255.50"></text></g><g><title>Hacl_Impl_Ed25519_PointAdd_point_add (9 samples, 7.56%)</title><rect x="5.0420%" y="229" width="7.5630%" height="15" fill="rgb(240,214,22)"/><text x="5.2920%" y="239.50">Hacl_Impl_..</text></g><g><title>fmul0 (9 samples, 7.56%)</title><rect x="5.0420%" y="213" width="7.5630%" height="15" fill="rgb(213,217,46)"/><text x="5.2920%" y="223.50">fmul0</text></g><g><title>fsquare (10 samples, 8.40%)</title><rect x="12.6050%" y="213" width="8.4034%" height="15" fill="rgb(241,159,53)"/><text x="12.8550%" y="223.50">fsquare</text></g><g><title>Hacl_Impl_Curve25519_Field51_fsqr (10 samples, 8.40%)</title><rect x="12.6050%" y="197" width="8.4034%" height="15" fill="rgb(241,70,32)"/><text x="12.8550%" y="207.50">Hacl_Impl_Cu..</text></g><g><title>FStar_UInt128_add (10 samples, 8.40%)</title><rect x="12.6050%" y="181" width="8.4034%" height="15" fill="rgb(233,117,50)"/><text x="12.8550%" y="191.50">FStar_UInt12..</text></g><g><title>sign_step_1 (22 samples, 18.49%)</title><rect x="4.2017%" y="293" width="18.4874%" height="15" fill="rgb(211,114,15)"/><text x="4.4517%" y="303.50">sign_step_1</text></g><g><title>point_mul_g_compress (22 samples, 18.49%)</title><rect x="4.2017%" y="277" width="18.4874%" height="15" fill="rgb(254,0,36)"/><text x="4.4517%" y="287.50">point_mul_g_compress</text></g><g><title>point_mul_g (21 samples, 17.65%)</title><rect x="5.0420%" y="261" width="17.6471%" height="15" fill="rgb(221,74,12)"/><text x="5.2920%" y="271.50">point_mul_g</text></g><g><title>Hacl_Impl_Ed25519_Ladder_point_mul (21 samples, 17.65%)</title><rect x="5.0420%" y="245" width="17.6471%" height="15" fill="rgb(241,221,3)"/><text x="5.2920%" y="255.50">Hacl_Impl_Ed25519_Ladder_po..</text></g><g><title>point_double (12 samples, 10.08%)</title><rect x="12.6050%" y="229" width="10.0840%" height="15" fill="rgb(252,91,23)"/><text x="12.8550%" y="239.50">point_double</text></g><g><title>fsum (2 samples, 1.68%)</title><rect x="21.0084%" y="213" width="1.6807%" height="15" fill="rgb(232,1,25)"/><text x="21.2584%" y="223.50"></text></g><g><title>Hacl_Impl_Curve25519_Field51_fadd (2 samples, 1.68%)</title><rect x="21.0084%" y="197" width="1.6807%" height="15" fill="rgb(253,145,25)"/><text x="21.2584%" y="207.50"></text></g><g><title>sign_step_2 (1 samples, 0.84%)</title><rect x="22.6891%" y="293" width="0.8403%" height="15" fill="rgb(226,43,53)"/><text x="22.9391%" y="303.50"></text></g><g><title>sha512_modq_pre (1 samples, 0.84%)</title><rect x="22.6891%" y="277" width="0.8403%" height="15" fill="rgb(245,116,39)"/><text x="22.9391%" y="287.50"></text></g><g><title>sha512_pre_msg (1 samples, 0.84%)</title><rect x="22.6891%" y="261" width="0.8403%" height="15" fill="rgb(231,205,33)"/><text x="22.9391%" y="271.50"></text></g><g><title>Hacl_Hash_SHA2_hash_512 (1 samples, 0.84%)</title><rect x="22.6891%" y="245" width="0.8403%" height="15" fill="rgb(238,96,15)"/><text x="22.9391%" y="255.50"></text></g><g><title>Hacl_Hash_SHA2_update_multi_512 (1 samples, 0.84%)</title><rect x="22.6891%" y="229" width="0.8403%" height="15" fill="rgb(212,80,14)"/><text x="22.9391%" y="239.50"></text></g><g><title>Hacl_Hash_Core_SHA2_update_384 (1 samples, 0.84%)</title><rect x="22.6891%" y="213" width="0.8403%" height="15" fill="rgb(209,118,24)"/><text x="22.9391%" y="223.50"></text></g><g><title>Hacl_Impl_Ed25519_PointCompress_point_compress (2 samples, 1.68%)</title><rect x="23.5294%" y="261" width="1.6807%" height="15" fill="rgb(234,176,14)"/><text x="23.7794%" y="271.50"></text></g><g><title>Hacl_Bignum25519_inverse (2 samples, 1.68%)</title><rect x="23.5294%" y="245" width="1.6807%" height="15" fill="rgb(207,145,21)"/><text x="23.7794%" y="255.50"></text></g><g><title>Hacl_Curve25519_51_finv (2 samples, 1.68%)</title><rect x="23.5294%" y="229" width="1.6807%" height="15" fill="rgb(218,58,54)"/><text x="23.7794%" y="239.50"></text></g><g><title>Hacl_Curve25519_51_fsquare_times (2 samples, 1.68%)</title><rect x="23.5294%" y="213" width="1.6807%" height="15" fill="rgb(229,11,50)"/><text x="23.7794%" y="223.50"></text></g><g><title>Hacl_Impl_Curve25519_Field51_fsqr (2 samples, 1.68%)</title><rect x="23.5294%" y="197" width="1.6807%" height="15" fill="rgb(221,170,33)"/><text x="23.7794%" y="207.50"></text></g><g><title>Hacl_Impl_Curve25519_Field51_fsub (2 samples, 1.68%)</title><rect x="25.2101%" y="213" width="1.6807%" height="15" fill="rgb(221,121,40)"/><text x="25.4601%" y="223.50"></text></g><g><title>Unknow (1 samples, 0.84%)</title><rect x="26.8908%" y="213" width="0.8403%" height="15" fill="rgb(214,165,32)"/><text x="27.1408%" y="223.50"></text></g><g><title>fmul0 (27 samples, 22.69%)</title><rect x="27.7311%" y="213" width="22.6891%" height="15" fill="rgb(243,195,30)"/><text x="27.9811%" y="223.50">fmul0</text></g><g><title>Hacl_Impl_Curve25519_Field51_fmul (27 samples, 22.69%)</title><rect x="27.7311%" y="197" width="22.6891%" height="15" fill="rgb(238,0,27)"/><text x="27.9811%" y="207.50">Hacl_Impl_Curve25519_Field51_fmul</text></g><g><title>FStar_UInt128_mul_wide (27 samples, 22.69%)</title><rect x="27.7311%" y="181" width="22.6891%" height="15" fill="rgb(226,0,50)"/><text x="27.9811%" y="191.50">FStar_UInt128_mul_wide</text></g><g><title>Hacl_Impl_Ed25519_PointAdd_point_add (31 samples, 26.05%)</title><rect x="25.2101%" y="229" width="26.0504%" height="15" fill="rgb(222,93,46)"/><text x="25.4601%" y="239.50">Hacl_Impl_Ed25519_PointAdd_point_add</text></g><g><title>fsum (1 samples, 0.84%)</title><rect x="50.4202%" y="213" width="0.8403%" height="15" fill="rgb(210,34,24)"/><text x="50.6702%" y="223.50"></text></g><g><title>Hacl_Impl_Curve25519_Field51_fadd (1 samples, 0.84%)</title><rect x="50.4202%" y="197" width="0.8403%" height="15" fill="rgb(217,47,8)"/><text x="50.6702%" y="207.50"></text></g><g><title>Hacl_Impl_Curve25519_Field51_fmul1 (1 samples, 0.84%)</title><rect x="51.2605%" y="213" width="0.8403%" height="15" fill="rgb(217,0,26)"/><text x="51.5105%" y="223.50"></text></g><g><title>FStar_UInt128_shift_right (1 samples, 0.84%)</title><rect x="51.2605%" y="197" width="0.8403%" height="15" fill="rgb(218,228,31)"/><text x="51.5105%" y="207.50"></text></g><g><title>Hacl_Impl_Curve25519_Field51_fmul (11 samples, 9.24%)</title><rect x="52.1008%" y="197" width="9.2437%" height="15" fill="rgb(208,101,40)"/><text x="52.3508%" y="207.50">Hacl_Impl_Cur..</text></g><g><title>fmul0 (12 samples, 10.08%)</title><rect x="52.1008%" y="213" width="10.0840%" height="15" fill="rgb(225,134,0)"/><text x="52.3508%" y="223.50">fmul0</text></g><g><title>Unknow (1 samples, 0.84%)</title><rect x="61.3445%" y="197" width="0.8403%" height="15" fill="rgb(241,37,25)"/><text x="61.5945%" y="207.50"></text></g><g><title>openmls::group::mls_group::MlsGroup::create_add_proposal (81 samples, 68.07%)</title><rect x="3.3613%" y="453" width="68.0672%" height="15" fill="rgb(251,149,9)"/><text x="3.6113%" y="463.50">openmls::group::mls_group::MlsGroup::create_add_proposal</text></g><g><title>openmls::framing::plaintext::MlsPlaintext::new_from_proposal_member (81 samples, 68.07%)</title><rect x="3.3613%" y="437" width="68.0672%" height="15" fill="rgb(225,196,54)"/><text x="3.6113%" y="447.50">openmls::framing::plaintext::MlsPlaintext::new_from_proposal_member</text></g><g><title>openmls::framing::plaintext::MlsPlaintext::new_from_member (81 samples, 68.07%)</title><rect x="3.3613%" y="421" width="68.0672%" height="15" fill="rgb(240,46,24)"/><text x="3.6113%" y="431.50">openmls::framing::plaintext::MlsPlaintext::new_from_member</text></g><g><title>openmls::framing::plaintext::MlsPlaintext::sign_from_member (81 samples, 68.07%)</title><rect x="3.3613%" y="405" width="68.0672%" height="15" fill="rgb(214,189,4)"/><text x="3.6113%" y="415.50">openmls::framing::plaintext::MlsPlaintext::sign_from_member</text></g><g><title>openmls::framing::plaintext::MlsPlaintextTbs::sign (81 samples, 68.07%)</title><rect x="3.3613%" y="389" width="68.0672%" height="15" fill="rgb(222,3,8)"/><text x="3.6113%" y="399.50">openmls::framing::plaintext::MlsPlaintextTbs::sign</text></g><g><title>openmls::credentials::CredentialBundle::sign (80 samples, 67.23%)</title><rect x="4.2017%" y="373" width="67.2269%" height="15" fill="rgb(250,163,6)"/><text x="4.4517%" y="383.50">openmls::credentials::CredentialBundle::sign</text></g><g><title>openmls::ciphersuite::SignaturePrivateKey::sign (80 samples, 67.23%)</title><rect x="4.2017%" y="357" width="67.2269%" height="15" fill="rgb(225,23,45)"/><text x="4.4517%" y="367.50">openmls::ciphersuite::SignaturePrivateKey::sign</text></g><g><title>evercrypt::signature::sign (80 samples, 67.23%)</title><rect x="4.2017%" y="341" width="67.2269%" height="15" fill="rgb(225,177,23)"/><text x="4.4517%" y="351.50">evercrypt::signature::sign</text></g><g><title>evercrypt::ed25519::eddsa_sign (80 samples, 67.23%)</title><rect x="4.2017%" y="325" width="67.2269%" height="15" fill="rgb(253,75,3)"/><text x="4.4517%" y="335.50">evercrypt::ed25519::eddsa_sign</text></g><g><title>Hacl_Ed25519_sign (80 samples, 67.23%)</title><rect x="4.2017%" y="309" width="67.2269%" height="15" fill="rgb(237,85,4)"/><text x="4.4517%" y="319.50">Hacl_Ed25519_sign</text></g><g><title>sign_step_3 (57 samples, 47.90%)</title><rect x="23.5294%" y="293" width="47.8992%" height="15" fill="rgb(212,23,3)"/><text x="23.7794%" y="303.50">sign_step_3</text></g><g><title>point_mul_g_compress (57 samples, 47.90%)</title><rect x="23.5294%" y="277" width="47.8992%" height="15" fill="rgb(250,127,19)"/><text x="23.7794%" y="287.50">point_mul_g_compress</text></g><g><title>point_mul_g (55 samples, 46.22%)</title><rect x="25.2101%" y="261" width="46.2185%" height="15" fill="rgb(222,82,14)"/><text x="25.4601%" y="271.50">point_mul_g</text></g><g><title>Hacl_Impl_Ed25519_Ladder_point_mul (55 samples, 46.22%)</title><rect x="25.2101%" y="245" width="46.2185%" height="15" fill="rgb(213,63,47)"/><text x="25.4601%" y="255.50">Hacl_Impl_Ed25519_Ladder_point_mul</text></g><g><title>point_double (24 samples, 20.17%)</title><rect x="51.2605%" y="229" width="20.1681%" height="15" fill="rgb(219,132,41)"/><text x="51.5105%" y="239.50">point_double</text></g><g><title>fsquare (11 samples, 9.24%)</title><rect x="62.1849%" y="213" width="9.2437%" height="15" fill="rgb(251,205,16)"/><text x="62.4349%" y="223.50">fsquare</text></g><g><title>hpke_rs::Hpke::key_schedule (3 samples, 2.52%)</title><rect x="71.4286%" y="213" width="2.5210%" height="15" fill="rgb(239,102,23)"/><text x="71.6786%" y="223.50">hp..</text></g><g><title>hpke_rs::kdf::Kdf::labeled_expand (3 samples, 2.52%)</title><rect x="71.4286%" y="197" width="2.5210%" height="15" fill="rgb(222,218,4)"/><text x="71.6786%" y="207.50">hp..</text></g><g><title>&lt;hpke_rs::hkdf::HkdfSha256 as hpke_rs::kdf::KdfTrait&gt;::expand (3 samples, 2.52%)</title><rect x="71.4286%" y="181" width="2.5210%" height="15" fill="rgb(232,91,40)"/><text x="71.6786%" y="191.50">&lt;h..</text></g><g><title>evercrypt::hkdf::expand (3 samples, 2.52%)</title><rect x="71.4286%" y="165" width="2.5210%" height="15" fill="rgb(238,170,50)"/><text x="71.6786%" y="175.50">ev..</text></g><g><title>EverCrypt_HKDF_expand_sha2_256 (3 samples, 2.52%)</title><rect x="71.4286%" y="149" width="2.5210%" height="15" fill="rgb(243,52,25)"/><text x="71.6786%" y="159.50">Ev..</text></g><g><title>EverCrypt_HMAC_compute_sha2_256 (3 samples, 2.52%)</title><rect x="71.4286%" y="133" width="2.5210%" height="15" fill="rgb(236,151,10)"/><text x="71.6786%" y="143.50">Ev..</text></g><g><title>EverCrypt_Hash_update_last_256 (3 samples, 2.52%)</title><rect x="71.4286%" y="117" width="2.5210%" height="15" fill="rgb(216,123,7)"/><text x="71.6786%" y="127.50">Ev..</text></g><g><title>Hacl_Hash_SHA2_update_multi_256 (3 samples, 2.52%)</title><rect x="71.4286%" y="101" width="2.5210%" height="15" fill="rgb(247,115,15)"/><text x="71.6786%" y="111.50">Ha..</text></g><g><title>Hacl_Hash_Core_SHA2_update_224 (3 samples, 2.52%)</title><rect x="71.4286%" y="85" width="2.5210%" height="15" fill="rgb(249,65,46)"/><text x="71.6786%" y="95.50">Ha..</text></g><g><title>hpke_rs::dh_kem::DhKem::dh_base (10 samples, 8.40%)</title><rect x="73.9496%" y="165" width="8.4034%" height="15" fill="rgb(230,132,24)"/><text x="74.1996%" y="175.50">hpke_rs::dh_..</text></g><g><title>evercrypt::ecdh::derive_base (10 samples, 8.40%)</title><rect x="73.9496%" y="149" width="8.4034%" height="15" fill="rgb(253,115,7)"/><text x="74.1996%" y="159.50">evercrypt::e..</text></g><g><title>evercrypt::x25519::dh_base (10 samples, 8.40%)</title><rect x="73.9496%" y="133" width="8.4034%" height="15" fill="rgb(233,23,21)"/><text x="74.1996%" y="143.50">evercrypt::x..</text></g><g><title>Hacl_Curve25519_51_secret_to_public (10 samples, 8.40%)</title><rect x="73.9496%" y="117" width="8.4034%" height="15" fill="rgb(231,203,18)"/><text x="74.1996%" y="127.50">Hacl_Curve25..</text></g><g><title>Hacl_Curve25519_51_scalarmult (10 samples, 8.40%)</title><rect x="73.9496%" y="101" width="8.4034%" height="15" fill="rgb(233,19,15)"/><text x="74.1996%" y="111.50">Hacl_Curve25..</text></g><g><title>montgomery_ladder (10 samples, 8.40%)</title><rect x="73.9496%" y="85" width="8.4034%" height="15" fill="rgb(213,12,4)"/><text x="74.1996%" y="95.50">montgomery_l..</text></g><g><title>point_add_and_double (10 samples, 8.40%)</title><rect x="73.9496%" y="69" width="8.4034%" height="15" fill="rgb(221,198,54)"/><text x="74.1996%" y="79.50">point_add_an..</text></g><g><title>Hacl_Impl_Curve25519_Field51_fmul (10 samples, 8.40%)</title><rect x="73.9496%" y="53" width="8.4034%" height="15" fill="rgb(247,189,16)"/><text x="74.1996%" y="63.50">Hacl_Impl_Cu..</text></g><g><title>FStar_UInt128_add (10 samples, 8.40%)</title><rect x="73.9496%" y="37" width="8.4034%" height="15" fill="rgb(213,82,46)"/><text x="74.1996%" y="47.50">FStar_UInt12..</text></g><g><title>hpke_rs::kdf::Kdf::labeled_expand (1 samples, 0.84%)</title><rect x="82.3529%" y="165" width="0.8403%" height="15" fill="rgb(216,129,40)"/><text x="82.6029%" y="175.50"></text></g><g><title>&lt;hpke_rs::hkdf::HkdfSha256 as hpke_rs::kdf::KdfTrait&gt;::expand (1 samples, 0.84%)</title><rect x="82.3529%" y="149" width="0.8403%" height="15" fill="rgb(222,154,45)"/><text x="82.6029%" y="159.50"></text></g><g><title>evercrypt::hkdf::expand (1 samples, 0.84%)</title><rect x="82.3529%" y="133" width="0.8403%" height="15" fill="rgb(214,223,41)"/><text x="82.6029%" y="143.50"></text></g><g><title>EverCrypt_HKDF_expand_sha2_256 (1 samples, 0.84%)</title><rect x="82.3529%" y="117" width="0.8403%" height="15" fill="rgb(212,167,3)"/><text x="82.6029%" y="127.50"></text></g><g><title>EverCrypt_HMAC_compute_sha2_256 (1 samples, 0.84%)</title><rect x="82.3529%" y="101" width="0.8403%" height="15" fill="rgb(219,226,20)"/><text x="82.6029%" y="111.50"></text></g><g><title>Hacl_Hash_SHA2_update_multi_256 (1 samples, 0.84%)</title><rect x="82.3529%" y="85" width="0.8403%" height="15" fill="rgb(231,29,48)"/><text x="82.6029%" y="95.50"></text></g><g><title>Hacl_Hash_Core_SHA2_update_224 (1 samples, 0.84%)</title><rect x="82.3529%" y="69" width="0.8403%" height="15" fill="rgb(224,12,4)"/><text x="82.6029%" y="79.50"></text></g><g><title>&lt;hpke_rs::dh_kem::DhKem as hpke_rs::kem::KemTrait&gt;::derive_key_pair (12 samples, 10.08%)</title><rect x="73.9496%" y="181" width="10.0840%" height="15" fill="rgb(217,180,30)"/><text x="74.1996%" y="191.50">&lt;hpke_rs::dh_ke..</text></g><g><title>hpke_rs::kdf::Kdf::labeled_extract (1 samples, 0.84%)</title><rect x="83.1933%" y="165" width="0.8403%" height="15" fill="rgb(237,137,17)"/><text x="83.4433%" y="175.50"></text></g><g><title>&lt;hpke_rs::hkdf::HkdfSha256 as hpke_rs::kdf::KdfTrait&gt;::extract (1 samples, 0.84%)</title><rect x="83.1933%" y="149" width="0.8403%" height="15" fill="rgb(252,225,18)"/><text x="83.4433%" y="159.50"></text></g><g><title>evercrypt::hkdf::extract (1 samples, 0.84%)</title><rect x="83.1933%" y="133" width="0.8403%" height="15" fill="rgb(209,177,11)"/><text x="83.4433%" y="143.50"></text></g><g><title>EverCrypt_HMAC_compute_sha2_256 (1 samples, 0.84%)</title><rect x="83.1933%" y="117" width="0.8403%" height="15" fill="rgb(214,147,8)"/><text x="83.4433%" y="127.50"></text></g><g><title>Hacl_Hash_SHA2_update_multi_256 (1 samples, 0.84%)</title><rect x="83.1933%" y="101" width="0.8403%" height="15" fill="rgb(213,225,52)"/><text x="83.4433%" y="111.50"></text></g><g><title>Hacl_Hash_Core_SHA2_update_224 (1 samples, 0.84%)</title><rect x="83.1933%" y="85" width="0.8403%" height="15" fill="rgb(205,99,43)"/><text x="83.4433%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (30 samples, 25.21%)</title><rect x="71.4286%" y="421" width="25.2101%" height="15" fill="rgb(248,141,45)"/><text x="71.6786%" y="431.50">core::iter::traits::iterator::Iterator::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (30 samples, 25.21%)</title><rect x="71.4286%" y="405" width="25.2101%" height="15" fill="rgb(233,198,44)"/><text x="71.6786%" y="415.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::trait..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (30 samples, 25.21%)</title><rect x="71.4286%" y="389" width="25.2101%" height="15" fill="rgb(231,176,38)"/><text x="71.6786%" y="399.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (30 samples, 25.21%)</title><rect x="71.4286%" y="373" width="25.2101%" height="15" fill="rgb(209,31,1)"/><text x="71.6786%" y="383.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (30 samples, 25.21%)</title><rect x="71.4286%" y="357" width="25.2101%" height="15" fill="rgb(246,42,27)"/><text x="71.6786%" y="367.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spe..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (30 samples, 25.21%)</title><rect x="71.4286%" y="341" width="25.2101%" height="15" fill="rgb(244,104,27)"/><text x="71.6786%" y="351.50">core::iter::traits::iterator::Iterator::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (30 samples, 25.21%)</title><rect x="71.4286%" y="325" width="25.2101%" height="15" fill="rgb(209,14,27)"/><text x="71.6786%" y="335.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as ..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (30 samples, 25.21%)</title><rect x="71.4286%" y="309" width="25.2101%" height="15" fill="rgb(205,170,50)"/><text x="71.6786%" y="319.50">core::iter::traits::iterator::Iterator::..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (30 samples, 25.21%)</title><rect x="71.4286%" y="293" width="25.2101%" height="15" fill="rgb(241,127,20)"/><text x="71.6786%" y="303.50">core::iter::adapters::map::map_fold::{{c..</text></g><g><title>openmls::group::mls_group::create_commit::&lt;impl openmls::group::mls_group::MlsGroup&gt;::create_commit_internal::{{closure}} (30 samples, 25.21%)</title><rect x="71.4286%" y="277" width="25.2101%" height="15" fill="rgb(230,72,5)"/><text x="71.6786%" y="287.50">openmls::group::mls_group::create_commit..</text></g><g><title>openmls::ciphersuite::Ciphersuite::hpke_seal (30 samples, 25.21%)</title><rect x="71.4286%" y="261" width="25.2101%" height="15" fill="rgb(231,221,3)"/><text x="71.6786%" y="271.50">openmls::ciphersuite::Ciphersuite::hpke_..</text></g><g><title>hpke_rs::Hpke::seal (30 samples, 25.21%)</title><rect x="71.4286%" y="245" width="25.2101%" height="15" fill="rgb(232,150,49)"/><text x="71.6786%" y="255.50">hpke_rs::Hpke::seal</text></g><g><title>hpke_rs::Hpke::setup_sender (30 samples, 25.21%)</title><rect x="71.4286%" y="229" width="25.2101%" height="15" fill="rgb(225,13,46)"/><text x="71.6786%" y="239.50">hpke_rs::Hpke::setup_sender</text></g><g><title>hpke_rs::kem::Kem::encaps (27 samples, 22.69%)</title><rect x="73.9496%" y="213" width="22.6891%" height="15" fill="rgb(236,192,49)"/><text x="74.1996%" y="223.50">hpke_rs::kem::Kem::encaps</text></g><g><title>&lt;hpke_rs::dh_kem::DhKem as hpke_rs::kem::KemTrait&gt;::encaps (27 samples, 22.69%)</title><rect x="73.9496%" y="197" width="22.6891%" height="15" fill="rgb(242,107,14)"/><text x="74.1996%" y="207.50">&lt;hpke_rs::dh_kem::DhKem as hpke_rs::..</text></g><g><title>hpke_rs::dh_kem::DhKem::dh (15 samples, 12.61%)</title><rect x="84.0336%" y="181" width="12.6050%" height="15" fill="rgb(251,185,35)"/><text x="84.2836%" y="191.50">hpke_rs::dh_kem::Dh..</text></g><g><title>evercrypt::ecdh::derive (15 samples, 12.61%)</title><rect x="84.0336%" y="165" width="12.6050%" height="15" fill="rgb(212,128,8)"/><text x="84.2836%" y="175.50">evercrypt::ecdh::de..</text></g><g><title>evercrypt::x25519::dh (15 samples, 12.61%)</title><rect x="84.0336%" y="149" width="12.6050%" height="15" fill="rgb(215,223,6)"/><text x="84.2836%" y="159.50">evercrypt::x25519::..</text></g><g><title>Hacl_Curve25519_51_ecdh (15 samples, 12.61%)</title><rect x="84.0336%" y="133" width="12.6050%" height="15" fill="rgb(216,23,45)"/><text x="84.2836%" y="143.50">Hacl_Curve25519_51_..</text></g><g><title>Hacl_Curve25519_51_scalarmult (15 samples, 12.61%)</title><rect x="84.0336%" y="117" width="12.6050%" height="15" fill="rgb(215,71,45)"/><text x="84.2836%" y="127.50">Hacl_Curve25519_51_..</text></g><g><title>montgomery_ladder (15 samples, 12.61%)</title><rect x="84.0336%" y="101" width="12.6050%" height="15" fill="rgb(224,2,48)"/><text x="84.2836%" y="111.50">montgomery_ladder</text></g><g><title>point_add_and_double (15 samples, 12.61%)</title><rect x="84.0336%" y="85" width="12.6050%" height="15" fill="rgb(218,48,8)"/><text x="84.2836%" y="95.50">point_add_and_double</text></g><g><title>fmul20 (15 samples, 12.61%)</title><rect x="84.0336%" y="69" width="12.6050%" height="15" fill="rgb(254,37,27)"/><text x="84.2836%" y="79.50">fmul20</text></g><g><title>FStar_UInt128_mul_wide (15 samples, 12.61%)</title><rect x="84.0336%" y="53" width="12.6050%" height="15" fill="rgb(237,112,2)"/><text x="84.2836%" y="63.50">FStar_UInt128_mul_w..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;openmls::group::mls_group::create_commit::PlaintextSecret&gt;&gt; (1 samples, 0.84%)</title><rect x="96.6387%" y="421" width="0.8403%" height="15" fill="rgb(243,64,54)"/><text x="96.8887%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;openmls::group::mls_group::create_commit::PlaintextSecret&gt;&gt; (1 samples, 0.84%)</title><rect x="96.6387%" y="405" width="0.8403%" height="15" fill="rgb(211,93,4)"/><text x="96.8887%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.84%)</title><rect x="96.6387%" y="389" width="0.8403%" height="15" fill="rgb(249,127,30)"/><text x="96.8887%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.84%)</title><rect x="96.6387%" y="373" width="0.8403%" height="15" fill="rgb(248,76,17)"/><text x="96.8887%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.84%)</title><rect x="96.6387%" y="357" width="0.8403%" height="15" fill="rgb(244,153,49)"/><text x="96.8887%" y="367.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.84%)</title><rect x="96.6387%" y="341" width="0.8403%" height="15" fill="rgb(231,94,34)"/><text x="96.8887%" y="351.50"></text></g><g><title>_int_free (1 samples, 0.84%)</title><rect x="96.6387%" y="325" width="0.8403%" height="15" fill="rgb(253,162,40)"/><text x="96.8887%" y="335.50"></text></g><g><title>malloc_consolidate (1 samples, 0.84%)</title><rect x="96.6387%" y="309" width="0.8403%" height="15" fill="rgb(219,194,14)"/><text x="96.8887%" y="319.50"></text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.84%)</title><rect x="96.6387%" y="293" width="0.8403%" height="15" fill="rgb(226,80,42)"/><text x="96.8887%" y="303.50"></text></g><g><title>openmls::schedule::KeySchedule::epoch_secrets (1 samples, 0.84%)</title><rect x="97.4790%" y="421" width="0.8403%" height="15" fill="rgb(208,108,5)"/><text x="97.7290%" y="431.50"></text></g><g><title>openmls::schedule::EpochSecrets::new (1 samples, 0.84%)</title><rect x="97.4790%" y="405" width="0.8403%" height="15" fill="rgb(209,204,33)"/><text x="97.7290%" y="415.50"></text></g><g><title>openmls::schedule::AuthenticationSecret::new (1 samples, 0.84%)</title><rect x="97.4790%" y="389" width="0.8403%" height="15" fill="rgb(232,22,14)"/><text x="97.7290%" y="399.50"></text></g><g><title>openmls::ciphersuite::Secret::derive_secret (1 samples, 0.84%)</title><rect x="97.4790%" y="373" width="0.8403%" height="15" fill="rgb(236,139,41)"/><text x="97.7290%" y="383.50"></text></g><g><title>openmls::ciphersuite::Secret::kdf_expand_label (1 samples, 0.84%)</title><rect x="97.4790%" y="357" width="0.8403%" height="15" fill="rgb(220,91,0)"/><text x="97.7290%" y="367.50"></text></g><g><title>openmls::ciphersuite::Secret::hkdf_expand (1 samples, 0.84%)</title><rect x="97.4790%" y="341" width="0.8403%" height="15" fill="rgb(243,200,48)"/><text x="97.7290%" y="351.50"></text></g><g><title>evercrypt::hkdf::expand (1 samples, 0.84%)</title><rect x="97.4790%" y="325" width="0.8403%" height="15" fill="rgb(237,172,41)"/><text x="97.7290%" y="335.50"></text></g><g><title>EverCrypt_HKDF_expand_sha2_256 (1 samples, 0.84%)</title><rect x="97.4790%" y="309" width="0.8403%" height="15" fill="rgb(247,152,34)"/><text x="97.7290%" y="319.50"></text></g><g><title>EverCrypt_HMAC_compute_sha2_256 (1 samples, 0.84%)</title><rect x="97.4790%" y="293" width="0.8403%" height="15" fill="rgb(205,88,40)"/><text x="97.7290%" y="303.50"></text></g><g><title>EverCrypt_Hash_update_last_256 (1 samples, 0.84%)</title><rect x="97.4790%" y="277" width="0.8403%" height="15" fill="rgb(223,30,13)"/><text x="97.7290%" y="287.50"></text></g><g><title>Hacl_Hash_SHA2_update_multi_256 (1 samples, 0.84%)</title><rect x="97.4790%" y="261" width="0.8403%" height="15" fill="rgb(249,7,18)"/><text x="97.7290%" y="271.50"></text></g><g><title>Hacl_Hash_Core_SHA2_update_224 (1 samples, 0.84%)</title><rect x="97.4790%" y="245" width="0.8403%" height="15" fill="rgb(242,185,6)"/><text x="97.7290%" y="255.50"></text></g><g><title>openmls::tree::RatchetTree::apply_proposals (1 samples, 0.84%)</title><rect x="98.3193%" y="421" width="0.8403%" height="15" fill="rgb(234,115,47)"/><text x="98.5693%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.84%)</title><rect x="98.3193%" y="405" width="0.8403%" height="15" fill="rgb(213,98,2)"/><text x="98.5693%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.84%)</title><rect x="98.3193%" y="389" width="0.8403%" height="15" fill="rgb(237,162,23)"/><text x="98.5693%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.84%)</title><rect x="98.3193%" y="373" width="0.8403%" height="15" fill="rgb(240,174,26)"/><text x="98.5693%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.84%)</title><rect x="98.3193%" y="357" width="0.8403%" height="15" fill="rgb(249,90,45)"/><text x="98.5693%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.84%)</title><rect x="98.3193%" y="341" width="0.8403%" height="15" fill="rgb(212,126,4)"/><text x="98.5693%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.84%)</title><rect x="98.3193%" y="325" width="0.8403%" height="15" fill="rgb(236,98,48)"/><text x="98.5693%" y="335.50"></text></g><g><title>core::ptr::write (1 samples, 0.84%)</title><rect x="98.3193%" y="309" width="0.8403%" height="15" fill="rgb(250,14,51)"/><text x="98.5693%" y="319.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.84%)</title><rect x="98.3193%" y="293" width="0.8403%" height="15" fill="rgb(236,2,16)"/><text x="98.5693%" y="303.50"></text></g><g><title>all (119 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(250,146,3)"/><text x="0.2500%" y="751.50"></text></g><g><title>group-f2b402fe5 (119 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(233,72,0)"/><text x="0.2500%" y="735.50">group-f2b402fe5</text></g><g><title>_start (117 samples, 98.32%)</title><rect x="1.6807%" y="709" width="98.3193%" height="15" fill="rgb(249,172,7)"/><text x="1.9307%" y="719.50">_start</text></g><g><title>__libc_start_main (117 samples, 98.32%)</title><rect x="1.6807%" y="693" width="98.3193%" height="15" fill="rgb(224,213,17)"/><text x="1.9307%" y="703.50">__libc_start_main</text></g><g><title>main (117 samples, 98.32%)</title><rect x="1.6807%" y="677" width="98.3193%" height="15" fill="rgb(221,52,2)"/><text x="1.9307%" y="687.50">main</text></g><g><title>std::rt::lang_start_internal (117 samples, 98.32%)</title><rect x="1.6807%" y="661" width="98.3193%" height="15" fill="rgb(220,8,41)"/><text x="1.9307%" y="671.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (117 samples, 98.32%)</title><rect x="1.6807%" y="645" width="98.3193%" height="15" fill="rgb(230,207,34)"/><text x="1.9307%" y="655.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (117 samples, 98.32%)</title><rect x="1.6807%" y="629" width="98.3193%" height="15" fill="rgb(240,157,11)"/><text x="1.9307%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (117 samples, 98.32%)</title><rect x="1.6807%" y="613" width="98.3193%" height="15" fill="rgb(243,209,15)"/><text x="1.9307%" y="623.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (117 samples, 98.32%)</title><rect x="1.6807%" y="597" width="98.3193%" height="15" fill="rgb(251,191,33)"/><text x="1.9307%" y="607.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (117 samples, 98.32%)</title><rect x="1.6807%" y="581" width="98.3193%" height="15" fill="rgb(217,58,8)"/><text x="1.9307%" y="591.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (117 samples, 98.32%)</title><rect x="1.6807%" y="565" width="98.3193%" height="15" fill="rgb(210,35,1)"/><text x="1.9307%" y="575.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (117 samples, 98.32%)</title><rect x="1.6807%" y="549" width="98.3193%" height="15" fill="rgb(231,62,7)"/><text x="1.9307%" y="559.50">core::ops::function::FnOnce::call_once</text></g><g><title>group::main (117 samples, 98.32%)</title><rect x="1.6807%" y="533" width="98.3193%" height="15" fill="rgb(207,73,10)"/><text x="1.9307%" y="543.50">group::main</text></g><g><title>group::bench_main (117 samples, 98.32%)</title><rect x="1.6807%" y="517" width="98.3193%" height="15" fill="rgb(216,178,40)"/><text x="1.9307%" y="527.50">group::bench_main</text></g><g><title>group::time (117 samples, 98.32%)</title><rect x="1.6807%" y="501" width="98.3193%" height="15" fill="rgb(238,220,1)"/><text x="1.9307%" y="511.50">group::time</text></g><g><title>group::bench_main::{{closure}} (117 samples, 98.32%)</title><rect x="1.6807%" y="485" width="98.3193%" height="15" fill="rgb(246,169,39)"/><text x="1.9307%" y="495.50">group::bench_main::{{closure}}</text></g><g><title>group::setup_group (117 samples, 98.32%)</title><rect x="1.6807%" y="469" width="98.3193%" height="15" fill="rgb(240,186,45)"/><text x="1.9307%" y="479.50">group::setup_group</text></g><g><title>openmls::group::mls_group::MlsGroup::create_commit (34 samples, 28.57%)</title><rect x="71.4286%" y="453" width="28.5714%" height="15" fill="rgb(225,14,29)"/><text x="71.6786%" y="463.50">openmls::group::mls_group::MlsGroup::create_co..</text></g><g><title>openmls::group::mls_group::create_commit::&lt;impl openmls::group::mls_group::MlsGroup&gt;::create_commit_internal (34 samples, 28.57%)</title><rect x="71.4286%" y="437" width="28.5714%" height="15" fill="rgb(243,96,26)"/><text x="71.6786%" y="447.50">openmls::group::mls_group::create_commit::&lt;imp..</text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash (1 samples, 0.84%)</title><rect x="99.1597%" y="421" width="0.8403%" height="15" fill="rgb(234,139,10)"/><text x="99.4097%" y="431.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.84%)</title><rect x="99.1597%" y="405" width="0.8403%" height="15" fill="rgb(235,208,23)"/><text x="99.4097%" y="415.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.84%)</title><rect x="99.1597%" y="389" width="0.8403%" height="15" fill="rgb(230,140,47)"/><text x="99.4097%" y="399.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.84%)</title><rect x="99.1597%" y="373" width="0.8403%" height="15" fill="rgb(241,227,54)"/><text x="99.4097%" y="383.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.84%)</title><rect x="99.1597%" y="357" width="0.8403%" height="15" fill="rgb(221,210,40)"/><text x="99.4097%" y="367.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.84%)</title><rect x="99.1597%" y="341" width="0.8403%" height="15" fill="rgb(207,52,1)"/><text x="99.4097%" y="351.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.84%)</title><rect x="99.1597%" y="325" width="0.8403%" height="15" fill="rgb(243,147,42)"/><text x="99.4097%" y="335.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.84%)</title><rect x="99.1597%" y="309" width="0.8403%" height="15" fill="rgb(245,93,7)"/><text x="99.4097%" y="319.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.84%)</title><rect x="99.1597%" y="293" width="0.8403%" height="15" fill="rgb(243,119,13)"/><text x="99.4097%" y="303.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.84%)</title><rect x="99.1597%" y="277" width="0.8403%" height="15" fill="rgb(228,164,28)"/><text x="99.4097%" y="287.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.84%)</title><rect x="99.1597%" y="261" width="0.8403%" height="15" fill="rgb(234,37,39)"/><text x="99.4097%" y="271.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.84%)</title><rect x="99.1597%" y="245" width="0.8403%" height="15" fill="rgb(246,155,10)"/><text x="99.4097%" y="255.50"></text></g><g><title>openmls::tree::hashes::LeafNodeHashInput::hash (1 samples, 0.84%)</title><rect x="99.1597%" y="229" width="0.8403%" height="15" fill="rgb(208,140,53)"/><text x="99.4097%" y="239.50"></text></g><g><title>openmls::ciphersuite::Ciphersuite::hash (1 samples, 0.84%)</title><rect x="99.1597%" y="213" width="0.8403%" height="15" fill="rgb(234,107,29)"/><text x="99.4097%" y="223.50"></text></g><g><title>evercrypt::digest::hash (1 samples, 0.84%)</title><rect x="99.1597%" y="197" width="0.8403%" height="15" fill="rgb(217,45,5)"/><text x="99.4097%" y="207.50"></text></g><g><title>EverCrypt_Hash_hash_256 (1 samples, 0.84%)</title><rect x="99.1597%" y="181" width="0.8403%" height="15" fill="rgb(251,168,5)"/><text x="99.4097%" y="191.50"></text></g><g><title>Hacl_Hash_SHA2_update_multi_256 (1 samples, 0.84%)</title><rect x="99.1597%" y="165" width="0.8403%" height="15" fill="rgb(242,96,14)"/><text x="99.4097%" y="175.50"></text></g><g><title>Hacl_Hash_Core_SHA2_update_224 (1 samples, 0.84%)</title><rect x="99.1597%" y="149" width="0.8403%" height="15" fill="rgb(231,148,6)"/><text x="99.4097%" y="159.50"></text></g></svg></svg>