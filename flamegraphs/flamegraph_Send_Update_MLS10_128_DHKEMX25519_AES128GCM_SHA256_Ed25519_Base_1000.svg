<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="741.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="741.00"> </text><svg id="frames" x="10" width="1180"><g><title>cfree@GLIBC_2.2.5 (3 samples, 2.97%)</title><rect x="0.0000%" y="261" width="2.9703%" height="15" fill="rgb(210,157,12)"/><text x="0.2500%" y="271.50">cfr..</text></g><g><title>_int_free (3 samples, 2.97%)</title><rect x="0.0000%" y="245" width="2.9703%" height="15" fill="rgb(246,96,27)"/><text x="0.2500%" y="255.50">_in..</text></g><g><title>cfree@GLIBC_2.2.5 (8 samples, 7.92%)</title><rect x="2.9703%" y="229" width="7.9208%" height="15" fill="rgb(249,45,12)"/><text x="3.2203%" y="239.50">cfree@GLIBC..</text></g><g><title>_int_free (7 samples, 6.93%)</title><rect x="3.9604%" y="213" width="6.9307%" height="15" fill="rgb(242,25,33)"/><text x="4.2104%" y="223.50">_int_free</text></g><g><title>alloc::alloc::box_free (4 samples, 3.96%)</title><rect x="19.8020%" y="149" width="3.9604%" height="15" fill="rgb(219,213,34)"/><text x="20.0520%" y="159.50">allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 3.96%)</title><rect x="19.8020%" y="133" width="3.9604%" height="15" fill="rgb(237,43,53)"/><text x="20.0520%" y="143.50">&lt;all..</text></g><g><title>alloc::alloc::dealloc (4 samples, 3.96%)</title><rect x="19.8020%" y="117" width="3.9604%" height="15" fill="rgb(254,164,38)"/><text x="20.0520%" y="127.50">allo..</text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 3.96%)</title><rect x="19.8020%" y="101" width="3.9604%" height="15" fill="rgb(236,8,21)"/><text x="20.0520%" y="111.50">cfre..</text></g><g><title>cfree@GLIBC_2.2.5 (6 samples, 5.94%)</title><rect x="23.7624%" y="149" width="5.9406%" height="15" fill="rgb(222,108,24)"/><text x="24.0124%" y="159.50">cfree@GL..</text></g><g><title>_int_free (6 samples, 5.94%)</title><rect x="23.7624%" y="133" width="5.9406%" height="15" fill="rgb(235,220,46)"/><text x="24.0124%" y="143.50">_int_free</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 5.94%)</title><rect x="29.7030%" y="85" width="5.9406%" height="15" fill="rgb(211,70,54)"/><text x="29.9530%" y="95.50">&lt;alloc::..</text></g><g><title>alloc::alloc::dealloc (6 samples, 5.94%)</title><rect x="29.7030%" y="69" width="5.9406%" height="15" fill="rgb(205,160,27)"/><text x="29.9530%" y="79.50">alloc::a..</text></g><g><title>cfree@GLIBC_2.2.5 (6 samples, 5.94%)</title><rect x="29.7030%" y="53" width="5.9406%" height="15" fill="rgb(232,217,41)"/><text x="29.9530%" y="63.50">cfree@GL..</text></g><g><title>_int_free (5 samples, 4.95%)</title><rect x="30.6931%" y="37" width="4.9505%" height="15" fill="rgb(250,22,34)"/><text x="30.9431%" y="47.50">_int_f..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::boxed::Box&lt;dyn openmls::extensions::Extension&gt;&gt;&gt; (29 samples, 28.71%)</title><rect x="10.8911%" y="213" width="28.7129%" height="15" fill="rgb(233,65,54)"/><text x="11.1411%" y="223.50">core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 28.71%)</title><rect x="10.8911%" y="197" width="28.7129%" height="15" fill="rgb(238,167,8)"/><text x="11.1411%" y="207.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop..</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::boxed::Box&lt;dyn openmls::extensions::Extension&gt;]&gt; (29 samples, 28.71%)</title><rect x="10.8911%" y="181" width="28.7129%" height="15" fill="rgb(217,135,46)"/><text x="11.1411%" y="191.50">core::ptr::drop_in_place&lt;[alloc::boxed::Box&lt;dy..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn openmls::extensions::Extension&gt;&gt; (29 samples, 28.71%)</title><rect x="10.8911%" y="165" width="28.7129%" height="15" fill="rgb(244,39,30)"/><text x="11.1411%" y="175.50">core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn..</text></g><g><title>core::ptr::drop_in_place&lt;openmls::extensions::capabilities_extension::CapabilitiesExtension&gt; (10 samples, 9.90%)</title><rect x="29.7030%" y="149" width="9.9010%" height="15" fill="rgb(240,225,23)"/><text x="29.9530%" y="159.50">core::ptr::dro..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;openmls::config::ProtocolVersion&gt;&gt; (10 samples, 9.90%)</title><rect x="29.7030%" y="133" width="9.9010%" height="15" fill="rgb(245,71,45)"/><text x="29.9530%" y="143.50">core::ptr::dro..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;openmls::config::ProtocolVersion&gt;&gt; (10 samples, 9.90%)</title><rect x="29.7030%" y="117" width="9.9010%" height="15" fill="rgb(206,32,5)"/><text x="29.9530%" y="127.50">core::ptr::dro..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 9.90%)</title><rect x="29.7030%" y="101" width="9.9010%" height="15" fill="rgb(239,176,5)"/><text x="29.9530%" y="111.50">&lt;alloc::raw_ve..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 3.96%)</title><rect x="35.6436%" y="85" width="3.9604%" height="15" fill="rgb(238,82,16)"/><text x="35.8936%" y="95.50">allo..</text></g><g><title>core::ptr::drop_in_place&lt;openmls::ciphersuite::Signature&gt; (15 samples, 14.85%)</title><rect x="39.6040%" y="213" width="14.8515%" height="15" fill="rgb(209,78,47)"/><text x="39.8540%" y="223.50">core::ptr::drop_in_plac..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (15 samples, 14.85%)</title><rect x="39.6040%" y="197" width="14.8515%" height="15" fill="rgb(231,141,29)"/><text x="39.8540%" y="207.50">core::ptr::drop_in_plac..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (15 samples, 14.85%)</title><rect x="39.6040%" y="181" width="14.8515%" height="15" fill="rgb(208,59,36)"/><text x="39.8540%" y="191.50">core::ptr::drop_in_plac..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 14.85%)</title><rect x="39.6040%" y="165" width="14.8515%" height="15" fill="rgb(218,225,47)"/><text x="39.8540%" y="175.50">&lt;alloc::raw_vec::RawVec..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 13.86%)</title><rect x="40.5941%" y="149" width="13.8614%" height="15" fill="rgb(241,94,15)"/><text x="40.8441%" y="159.50">&lt;alloc::alloc::Global..</text></g><g><title>alloc::alloc::dealloc (14 samples, 13.86%)</title><rect x="40.5941%" y="133" width="13.8614%" height="15" fill="rgb(244,161,35)"/><text x="40.8441%" y="143.50">alloc::alloc::dealloc</text></g><g><title>cfree@GLIBC_2.2.5 (14 samples, 13.86%)</title><rect x="40.5941%" y="117" width="13.8614%" height="15" fill="rgb(239,75,34)"/><text x="40.8441%" y="127.50">cfree@GLIBC_2.2.5</text></g><g><title>_int_free (13 samples, 12.87%)</title><rect x="41.5842%" y="101" width="12.8713%" height="15" fill="rgb(231,101,29)"/><text x="41.8342%" y="111.50">_int_free</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;openmls::key_packages::KeyPackage&gt;&gt; (53 samples, 52.48%)</title><rect x="2.9703%" y="245" width="52.4752%" height="15" fill="rgb(252,25,11)"/><text x="3.2203%" y="255.50">core::ptr::drop_in_place&lt;core::option::Option&lt;openmls::key_packages::KeyPackage&gt;&gt;</text></g><g><title>core::ptr::drop_in_place&lt;openmls::key_packages::KeyPackage&gt; (45 samples, 44.55%)</title><rect x="10.8911%" y="229" width="44.5545%" height="15" fill="rgb(242,142,42)"/><text x="11.1411%" y="239.50">core::ptr::drop_in_place&lt;openmls::key_packages::KeyPackage&gt;</text></g><g><title>core::ptr::drop_in_place&lt;openmls::credentials::Credential&gt; (1 samples, 0.99%)</title><rect x="54.4554%" y="213" width="0.9901%" height="15" fill="rgb(231,190,27)"/><text x="54.7054%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;openmls::credentials::MlsCredentialType&gt; (1 samples, 0.99%)</title><rect x="54.4554%" y="197" width="0.9901%" height="15" fill="rgb(241,106,3)"/><text x="54.7054%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;openmls::credentials::BasicCredential&gt; (1 samples, 0.99%)</title><rect x="54.4554%" y="181" width="0.9901%" height="15" fill="rgb(225,168,41)"/><text x="54.7054%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.99%)</title><rect x="54.4554%" y="165" width="0.9901%" height="15" fill="rgb(227,24,35)"/><text x="54.7054%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.99%)</title><rect x="54.4554%" y="149" width="0.9901%" height="15" fill="rgb(218,63,46)"/><text x="54.7054%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.99%)</title><rect x="54.4554%" y="133" width="0.9901%" height="15" fill="rgb(252,106,54)"/><text x="54.7054%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.99%)</title><rect x="54.4554%" y="117" width="0.9901%" height="15" fill="rgb(228,79,3)"/><text x="54.7054%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.99%)</title><rect x="54.4554%" y="101" width="0.9901%" height="15" fill="rgb(210,55,46)"/><text x="54.7054%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 61.39%)</title><rect x="0.0000%" y="293" width="61.3861%" height="15" fill="rgb(230,88,51)"/><text x="0.2500%" y="303.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop</text></g><g><title>core::ptr::drop_in_place&lt;[openmls::tree::node::Node]&gt; (62 samples, 61.39%)</title><rect x="0.0000%" y="277" width="61.3861%" height="15" fill="rgb(241,221,53)"/><text x="0.2500%" y="287.50">core::ptr::drop_in_place&lt;[openmls::tree::node::Node]&gt;</text></g><g><title>core::ptr::drop_in_place&lt;openmls::tree::node::Node&gt; (59 samples, 58.42%)</title><rect x="2.9703%" y="261" width="58.4158%" height="15" fill="rgb(253,119,43)"/><text x="3.2203%" y="271.50">core::ptr::drop_in_place&lt;openmls::tree::node::Node&gt;</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;openmls::tree::node::ParentNode&gt;&gt; (6 samples, 5.94%)</title><rect x="55.4455%" y="245" width="5.9406%" height="15" fill="rgb(225,81,42)"/><text x="55.6955%" y="255.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;openmls::tree::node::ParentNode&gt; (1 samples, 0.99%)</title><rect x="60.3960%" y="229" width="0.9901%" height="15" fill="rgb(240,130,17)"/><text x="60.6460%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;hpke_rs::HpkePublicKey&gt; (1 samples, 0.99%)</title><rect x="60.3960%" y="213" width="0.9901%" height="15" fill="rgb(223,109,15)"/><text x="60.6460%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.99%)</title><rect x="60.3960%" y="197" width="0.9901%" height="15" fill="rgb(209,111,26)"/><text x="60.6460%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.99%)</title><rect x="60.3960%" y="181" width="0.9901%" height="15" fill="rgb(249,65,52)"/><text x="60.6460%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.99%)</title><rect x="60.3960%" y="165" width="0.9901%" height="15" fill="rgb(237,57,35)"/><text x="60.6460%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.99%)</title><rect x="60.3960%" y="149" width="0.9901%" height="15" fill="rgb(241,196,19)"/><text x="60.6460%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.99%)</title><rect x="60.3960%" y="133" width="0.9901%" height="15" fill="rgb(210,93,0)"/><text x="60.6460%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;openmls::tree::RatchetTree&gt;&gt; (97 samples, 96.04%)</title><rect x="0.0000%" y="357" width="96.0396%" height="15" fill="rgb(210,105,38)"/><text x="0.2500%" y="367.50">core::ptr::drop_in_place&lt;core::cell::RefCell&lt;openmls::tree::RatchetTree&gt;&gt;</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;openmls::tree::RatchetTree&gt;&gt; (97 samples, 96.04%)</title><rect x="0.0000%" y="341" width="96.0396%" height="15" fill="rgb(224,102,2)"/><text x="0.2500%" y="351.50">core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;openmls::tree::RatchetTree&gt;&gt;</text></g><g><title>core::ptr::drop_in_place&lt;openmls::tree::RatchetTree&gt; (97 samples, 96.04%)</title><rect x="0.0000%" y="325" width="96.0396%" height="15" fill="rgb(235,198,31)"/><text x="0.2500%" y="335.50">core::ptr::drop_in_place&lt;openmls::tree::RatchetTree&gt;</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;openmls::tree::node::Node&gt;&gt; (97 samples, 96.04%)</title><rect x="0.0000%" y="309" width="96.0396%" height="15" fill="rgb(218,114,41)"/><text x="0.2500%" y="319.50">core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;openmls::tree::node::Node&gt;&gt;</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;openmls::tree::node::Node&gt;&gt; (35 samples, 34.65%)</title><rect x="61.3861%" y="293" width="34.6535%" height="15" fill="rgb(238,70,17)"/><text x="61.6361%" y="303.50">core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;openmls:..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 34.65%)</title><rect x="61.3861%" y="277" width="34.6535%" height="15" fill="rgb(216,188,2)"/><text x="61.6361%" y="287.50">&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (35 samples, 34.65%)</title><rect x="61.3861%" y="261" width="34.6535%" height="15" fill="rgb(236,11,45)"/><text x="61.6361%" y="271.50">&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallo..</text></g><g><title>alloc::alloc::dealloc (35 samples, 34.65%)</title><rect x="61.3861%" y="245" width="34.6535%" height="15" fill="rgb(227,125,54)"/><text x="61.6361%" y="255.50">alloc::alloc::dealloc</text></g><g><title>cfree@GLIBC_2.2.5 (35 samples, 34.65%)</title><rect x="61.3861%" y="229" width="34.6535%" height="15" fill="rgb(213,97,15)"/><text x="61.6361%" y="239.50">cfree@GLIBC_2.2.5</text></g><g><title>_int_free (35 samples, 34.65%)</title><rect x="61.3861%" y="213" width="34.6535%" height="15" fill="rgb(215,199,0)"/><text x="61.6361%" y="223.50">_int_free</text></g><g><title>malloc_consolidate (35 samples, 34.65%)</title><rect x="61.3861%" y="197" width="34.6535%" height="15" fill="rgb(223,164,52)"/><text x="61.6361%" y="207.50">malloc_consolidate</text></g><g><title>unlink_chunk.constprop.0 (7 samples, 6.93%)</title><rect x="89.1089%" y="181" width="6.9307%" height="15" fill="rgb(229,168,27)"/><text x="89.3589%" y="191.50">unlink_ch..</text></g><g><title>core::ptr::drop_in_place&lt;(alloc::vec::Vec&lt;openmls::group::mls_group::MlsGroup&gt;,group::Setup,openmls::framing::plaintext::MlsPlaintext,openmls::framing::plaintext::MlsPlaintext)&gt; (99 samples, 98.02%)</title><rect x="0.0000%" y="437" width="98.0198%" height="15" fill="rgb(224,208,40)"/><text x="0.2500%" y="447.50">core::ptr::drop_in_place&lt;(alloc::vec::Vec&lt;openmls::group::mls_group::MlsGroup&gt;,group::Setup,openmls::framing::plaintext::MlsPlaintext,openmls::framing::plaintext::M..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;openmls::group::mls_group::MlsGroup&gt;&gt; (99 samples, 98.02%)</title><rect x="0.0000%" y="421" width="98.0198%" height="15" fill="rgb(228,178,30)"/><text x="0.2500%" y="431.50">core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;openmls::group::mls_group::MlsGroup&gt;&gt;</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (99 samples, 98.02%)</title><rect x="0.0000%" y="405" width="98.0198%" height="15" fill="rgb(208,34,45)"/><text x="0.2500%" y="415.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop</text></g><g><title>core::ptr::drop_in_place&lt;[openmls::group::mls_group::MlsGroup]&gt; (99 samples, 98.02%)</title><rect x="0.0000%" y="389" width="98.0198%" height="15" fill="rgb(209,143,18)"/><text x="0.2500%" y="399.50">core::ptr::drop_in_place&lt;[openmls::group::mls_group::MlsGroup]&gt;</text></g><g><title>core::ptr::drop_in_place&lt;openmls::group::mls_group::MlsGroup&gt; (99 samples, 98.02%)</title><rect x="0.0000%" y="373" width="98.0198%" height="15" fill="rgb(218,150,44)"/><text x="0.2500%" y="383.50">core::ptr::drop_in_place&lt;openmls::group::mls_group::MlsGroup&gt;</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;openmls::tree::secret_tree::SecretTree&gt;&gt; (2 samples, 1.98%)</title><rect x="96.0396%" y="357" width="1.9802%" height="15" fill="rgb(241,44,25)"/><text x="96.2896%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;openmls::tree::secret_tree::SecretTree&gt;&gt; (2 samples, 1.98%)</title><rect x="96.0396%" y="341" width="1.9802%" height="15" fill="rgb(242,210,34)"/><text x="96.2896%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;openmls::tree::secret_tree::SecretTree&gt; (2 samples, 1.98%)</title><rect x="96.0396%" y="325" width="1.9802%" height="15" fill="rgb(232,120,3)"/><text x="96.2896%" y="335.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;openmls::tree::secret_tree::SecretTreeNode&gt;&gt;&gt; (2 samples, 1.98%)</title><rect x="96.0396%" y="309" width="1.9802%" height="15" fill="rgb(211,124,31)"/><text x="96.2896%" y="319.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 1.98%)</title><rect x="96.0396%" y="293" width="1.9802%" height="15" fill="rgb(239,57,34)"/><text x="96.2896%" y="303.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[core::option::Option&lt;openmls::tree::secret_tree::SecretTreeNode&gt;]&gt; (2 samples, 1.98%)</title><rect x="96.0396%" y="277" width="1.9802%" height="15" fill="rgb(240,85,9)"/><text x="96.2896%" y="287.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;openmls::tree::secret_tree::SecretTreeNode&gt;&gt; (2 samples, 1.98%)</title><rect x="96.0396%" y="261" width="1.9802%" height="15" fill="rgb(249,1,45)"/><text x="96.2896%" y="271.50">c..</text></g><g><title>openmls::group::mls_group::MlsGroup::apply_commit (1 samples, 0.99%)</title><rect x="98.0198%" y="421" width="0.9901%" height="15" fill="rgb(239,91,40)"/><text x="98.2698%" y="431.50"></text></g><g><title>openmls::group::mls_group::apply_commit::&lt;impl openmls::group::mls_group::MlsGroup&gt;::apply_commit_internal (1 samples, 0.99%)</title><rect x="98.0198%" y="405" width="0.9901%" height="15" fill="rgb(211,60,7)"/><text x="98.2698%" y="415.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash (1 samples, 0.99%)</title><rect x="98.0198%" y="389" width="0.9901%" height="15" fill="rgb(222,218,26)"/><text x="98.2698%" y="399.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.99%)</title><rect x="98.0198%" y="373" width="0.9901%" height="15" fill="rgb(217,66,19)"/><text x="98.2698%" y="383.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.99%)</title><rect x="98.0198%" y="357" width="0.9901%" height="15" fill="rgb(215,224,41)"/><text x="98.2698%" y="367.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.99%)</title><rect x="98.0198%" y="341" width="0.9901%" height="15" fill="rgb(209,122,52)"/><text x="98.2698%" y="351.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.99%)</title><rect x="98.0198%" y="325" width="0.9901%" height="15" fill="rgb(221,121,40)"/><text x="98.2698%" y="335.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.99%)</title><rect x="98.0198%" y="309" width="0.9901%" height="15" fill="rgb(244,184,30)"/><text x="98.2698%" y="319.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.99%)</title><rect x="98.0198%" y="293" width="0.9901%" height="15" fill="rgb(229,115,31)"/><text x="98.2698%" y="303.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.99%)</title><rect x="98.0198%" y="277" width="0.9901%" height="15" fill="rgb(216,33,31)"/><text x="98.2698%" y="287.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.99%)</title><rect x="98.0198%" y="261" width="0.9901%" height="15" fill="rgb(226,130,40)"/><text x="98.2698%" y="271.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.99%)</title><rect x="98.0198%" y="245" width="0.9901%" height="15" fill="rgb(209,89,30)"/><text x="98.2698%" y="255.50"></text></g><g><title>openmls::tree::hashes::ParentNodeTreeHashInput::hash (1 samples, 0.99%)</title><rect x="98.0198%" y="229" width="0.9901%" height="15" fill="rgb(246,84,45)"/><text x="98.2698%" y="239.50"></text></g><g><title>openmls::ciphersuite::Ciphersuite::hash (1 samples, 0.99%)</title><rect x="98.0198%" y="213" width="0.9901%" height="15" fill="rgb(214,190,32)"/><text x="98.2698%" y="223.50"></text></g><g><title>evercrypt::digest::hash (1 samples, 0.99%)</title><rect x="98.0198%" y="197" width="0.9901%" height="15" fill="rgb(234,3,14)"/><text x="98.2698%" y="207.50"></text></g><g><title>EverCrypt_Hash_hash_256 (1 samples, 0.99%)</title><rect x="98.0198%" y="181" width="0.9901%" height="15" fill="rgb(239,13,22)"/><text x="98.2698%" y="191.50"></text></g><g><title>Hacl_Hash_SHA2_update_multi_256 (1 samples, 0.99%)</title><rect x="98.0198%" y="165" width="0.9901%" height="15" fill="rgb(250,185,44)"/><text x="98.2698%" y="175.50"></text></g><g><title>Hacl_Hash_Core_SHA2_update_224 (1 samples, 0.99%)</title><rect x="98.0198%" y="149" width="0.9901%" height="15" fill="rgb(209,76,10)"/><text x="98.2698%" y="159.50"></text></g><g><title>all (101 samples, 100%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(214,221,10)"/><text x="0.2500%" y="719.50"></text></g><g><title>group-f2b402fe5 (101 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(207,3,22)"/><text x="0.2500%" y="703.50">group-f2b402fe5</text></g><g><title>_start (101 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(241,42,8)"/><text x="0.2500%" y="687.50">_start</text></g><g><title>__libc_start_main (101 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(238,49,21)"/><text x="0.2500%" y="671.50">__libc_start_main</text></g><g><title>main (101 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(232,75,2)"/><text x="0.2500%" y="655.50">main</text></g><g><title>std::rt::lang_start_internal (101 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(245,109,36)"/><text x="0.2500%" y="639.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (101 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(239,203,39)"/><text x="0.2500%" y="623.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (101 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(232,35,47)"/><text x="0.2500%" y="607.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (101 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(231,1,26)"/><text x="0.2500%" y="591.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (101 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(241,219,38)"/><text x="0.2500%" y="575.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (101 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(221,68,12)"/><text x="0.2500%" y="559.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (101 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(211,55,8)"/><text x="0.2500%" y="543.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (101 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(217,48,19)"/><text x="0.2500%" y="527.50">core::ops::function::FnOnce::call_once</text></g><g><title>group::main (101 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(244,58,26)"/><text x="0.2500%" y="511.50">group::main</text></g><g><title>group::bench_main (101 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(250,78,9)"/><text x="0.2500%" y="495.50">group::bench_main</text></g><g><title>group::time (101 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(237,192,41)"/><text x="0.2500%" y="479.50">group::time</text></g><g><title>group::bench_main::{{closure}} (101 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(216,170,31)"/><text x="0.2500%" y="463.50">group::bench_main::{{closure}}</text></g><g><title>group::send_update (2 samples, 1.98%)</title><rect x="98.0198%" y="437" width="1.9802%" height="15" fill="rgb(223,15,37)"/><text x="98.2698%" y="447.50">g..</text></g><g><title>openmls::group::mls_group::MlsGroup::create_commit (1 samples, 0.99%)</title><rect x="99.0099%" y="421" width="0.9901%" height="15" fill="rgb(247,33,22)"/><text x="99.2599%" y="431.50"></text></g><g><title>openmls::group::mls_group::create_commit::&lt;impl openmls::group::mls_group::MlsGroup&gt;::create_commit_internal (1 samples, 0.99%)</title><rect x="99.0099%" y="405" width="0.9901%" height="15" fill="rgb(228,133,32)"/><text x="99.2599%" y="415.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash (1 samples, 0.99%)</title><rect x="99.0099%" y="389" width="0.9901%" height="15" fill="rgb(217,50,20)"/><text x="99.2599%" y="399.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.99%)</title><rect x="99.0099%" y="373" width="0.9901%" height="15" fill="rgb(247,200,10)"/><text x="99.2599%" y="383.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.99%)</title><rect x="99.0099%" y="357" width="0.9901%" height="15" fill="rgb(242,54,30)"/><text x="99.2599%" y="367.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.99%)</title><rect x="99.0099%" y="341" width="0.9901%" height="15" fill="rgb(219,129,39)"/><text x="99.2599%" y="351.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.99%)</title><rect x="99.0099%" y="325" width="0.9901%" height="15" fill="rgb(222,101,33)"/><text x="99.2599%" y="335.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.99%)</title><rect x="99.0099%" y="309" width="0.9901%" height="15" fill="rgb(250,220,34)"/><text x="99.2599%" y="319.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.99%)</title><rect x="99.0099%" y="293" width="0.9901%" height="15" fill="rgb(251,1,27)"/><text x="99.2599%" y="303.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.99%)</title><rect x="99.0099%" y="277" width="0.9901%" height="15" fill="rgb(226,19,17)"/><text x="99.2599%" y="287.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.99%)</title><rect x="99.0099%" y="261" width="0.9901%" height="15" fill="rgb(208,208,27)"/><text x="99.2599%" y="271.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.99%)</title><rect x="99.0099%" y="245" width="0.9901%" height="15" fill="rgb(235,1,51)"/><text x="99.2599%" y="255.50"></text></g><g><title>openmls::tree::hashes::ParentNodeTreeHashInput::hash (1 samples, 0.99%)</title><rect x="99.0099%" y="229" width="0.9901%" height="15" fill="rgb(250,198,15)"/><text x="99.2599%" y="239.50"></text></g><g><title>openmls::ciphersuite::Ciphersuite::hash (1 samples, 0.99%)</title><rect x="99.0099%" y="213" width="0.9901%" height="15" fill="rgb(249,66,32)"/><text x="99.2599%" y="223.50"></text></g><g><title>evercrypt::digest::hash (1 samples, 0.99%)</title><rect x="99.0099%" y="197" width="0.9901%" height="15" fill="rgb(253,13,19)"/><text x="99.2599%" y="207.50"></text></g><g><title>EverCrypt_Hash_hash_256 (1 samples, 0.99%)</title><rect x="99.0099%" y="181" width="0.9901%" height="15" fill="rgb(221,141,24)"/><text x="99.2599%" y="191.50"></text></g><g><title>EverCrypt_Hash_update_last_256 (1 samples, 0.99%)</title><rect x="99.0099%" y="165" width="0.9901%" height="15" fill="rgb(246,171,23)"/><text x="99.2599%" y="175.50"></text></g><g><title>Hacl_Hash_SHA2_update_multi_256 (1 samples, 0.99%)</title><rect x="99.0099%" y="149" width="0.9901%" height="15" fill="rgb(226,43,25)"/><text x="99.2599%" y="159.50"></text></g><g><title>Hacl_Hash_Core_SHA2_update_224 (1 samples, 0.99%)</title><rect x="99.0099%" y="133" width="0.9901%" height="15" fill="rgb(224,99,12)"/><text x="99.2599%" y="143.50"></text></g></svg></svg>