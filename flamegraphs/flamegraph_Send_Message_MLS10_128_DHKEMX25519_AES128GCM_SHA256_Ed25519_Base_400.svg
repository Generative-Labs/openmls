<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="693.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="693.00"> </text><svg id="frames" x="10" width="1180"><g><title>cfree@GLIBC_2.2.5 (1 samples, 6.25%)</title><rect x="6.2500%" y="181" width="6.2500%" height="15" fill="rgb(225,41,13)"/><text x="6.5000%" y="191.50">cfree@GL..</text></g><g><title>_int_free (1 samples, 6.25%)</title><rect x="6.2500%" y="165" width="6.2500%" height="15" fill="rgb(220,65,27)"/><text x="6.5000%" y="175.50">_int_free</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::boxed::Box&lt;dyn openmls::extensions::Extension&gt;&gt;&gt; (3 samples, 18.75%)</title><rect x="12.5000%" y="165" width="18.7500%" height="15" fill="rgb(206,4,41)"/><text x="12.7500%" y="175.50">core::ptr::drop_in_place&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 18.75%)</title><rect x="12.5000%" y="149" width="18.7500%" height="15" fill="rgb(219,60,39)"/><text x="12.7500%" y="159.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core..</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::boxed::Box&lt;dyn openmls::extensions::Extension&gt;]&gt; (3 samples, 18.75%)</title><rect x="12.5000%" y="133" width="18.7500%" height="15" fill="rgb(226,4,38)"/><text x="12.7500%" y="143.50">core::ptr::drop_in_place&lt;[all..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn openmls::extensions::Extension&gt;&gt; (3 samples, 18.75%)</title><rect x="12.5000%" y="117" width="18.7500%" height="15" fill="rgb(250,52,3)"/><text x="12.7500%" y="127.50">core::ptr::drop_in_place&lt;allo..</text></g><g><title>alloc::alloc::box_free (2 samples, 12.50%)</title><rect x="18.7500%" y="101" width="12.5000%" height="15" fill="rgb(234,93,0)"/><text x="19.0000%" y="111.50">alloc::alloc::box_f..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 12.50%)</title><rect x="18.7500%" y="85" width="12.5000%" height="15" fill="rgb(251,47,47)"/><text x="19.0000%" y="95.50">&lt;alloc::alloc::Glob..</text></g><g><title>alloc::alloc::dealloc (2 samples, 12.50%)</title><rect x="18.7500%" y="69" width="12.5000%" height="15" fill="rgb(205,166,47)"/><text x="19.0000%" y="79.50">alloc::alloc::deall..</text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 12.50%)</title><rect x="18.7500%" y="53" width="12.5000%" height="15" fill="rgb(231,148,8)"/><text x="19.0000%" y="63.50">cfree@GLIBC_2.2.5</text></g><g><title>_int_free (2 samples, 12.50%)</title><rect x="18.7500%" y="37" width="12.5000%" height="15" fill="rgb(244,185,19)"/><text x="19.0000%" y="47.50">_int_free</text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 25.00%)</title><rect x="31.2500%" y="133" width="25.0000%" height="15" fill="rgb(224,201,45)"/><text x="31.5000%" y="143.50">cfree@GLIBC_2.2.5</text></g><g><title>_int_free (4 samples, 25.00%)</title><rect x="31.2500%" y="117" width="25.0000%" height="15" fill="rgb(240,77,39)"/><text x="31.5000%" y="127.50">_int_free</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;openmls::key_packages::KeyPackage&gt;&gt; (9 samples, 56.25%)</title><rect x="6.2500%" y="197" width="56.2500%" height="15" fill="rgb(248,211,29)"/><text x="6.5000%" y="207.50">core::ptr::drop_in_place&lt;core::option::Option&lt;openmls::key_packages::KeyPackage&gt;&gt;</text></g><g><title>core::ptr::drop_in_place&lt;openmls::key_packages::KeyPackage&gt; (8 samples, 50.00%)</title><rect x="12.5000%" y="181" width="50.0000%" height="15" fill="rgb(232,214,46)"/><text x="12.7500%" y="191.50">core::ptr::drop_in_place&lt;openmls::key_packages::KeyPackage&gt;</text></g><g><title>core::ptr::drop_in_place&lt;openmls::credentials::Credential&gt; (5 samples, 31.25%)</title><rect x="31.2500%" y="165" width="31.2500%" height="15" fill="rgb(213,99,54)"/><text x="31.5000%" y="175.50">core::ptr::drop_in_place&lt;openmls::credentials::Cre..</text></g><g><title>core::ptr::drop_in_place&lt;openmls::credentials::MlsCredentialType&gt; (5 samples, 31.25%)</title><rect x="31.2500%" y="149" width="31.2500%" height="15" fill="rgb(240,19,46)"/><text x="31.5000%" y="159.50">core::ptr::drop_in_place&lt;openmls::credentials::Mls..</text></g><g><title>core::ptr::drop_in_place&lt;openmls::credentials::BasicCredential&gt; (1 samples, 6.25%)</title><rect x="56.2500%" y="133" width="6.2500%" height="15" fill="rgb(243,89,10)"/><text x="56.5000%" y="143.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;openmls::ciphersuite::SignaturePublicKey&gt; (1 samples, 6.25%)</title><rect x="56.2500%" y="117" width="6.2500%" height="15" fill="rgb(249,28,32)"/><text x="56.5000%" y="127.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 6.25%)</title><rect x="56.2500%" y="101" width="6.2500%" height="15" fill="rgb(253,30,9)"/><text x="56.5000%" y="111.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 6.25%)</title><rect x="56.2500%" y="85" width="6.2500%" height="15" fill="rgb(217,2,26)"/><text x="56.5000%" y="95.50">core::pt..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 6.25%)</title><rect x="56.2500%" y="69" width="6.2500%" height="15" fill="rgb(220,28,10)"/><text x="56.5000%" y="79.50">&lt;alloc::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 68.75%)</title><rect x="0.0000%" y="245" width="68.7500%" height="15" fill="rgb(228,167,49)"/><text x="0.2500%" y="255.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop</text></g><g><title>core::ptr::drop_in_place&lt;[openmls::tree::node::Node]&gt; (11 samples, 68.75%)</title><rect x="0.0000%" y="229" width="68.7500%" height="15" fill="rgb(238,212,3)"/><text x="0.2500%" y="239.50">core::ptr::drop_in_place&lt;[openmls::tree::node::Node]&gt;</text></g><g><title>core::ptr::drop_in_place&lt;openmls::tree::node::Node&gt; (10 samples, 62.50%)</title><rect x="6.2500%" y="213" width="62.5000%" height="15" fill="rgb(229,134,44)"/><text x="6.5000%" y="223.50">core::ptr::drop_in_place&lt;openmls::tree::node::Node&gt;</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;openmls::tree::node::ParentNode&gt;&gt; (1 samples, 6.25%)</title><rect x="62.5000%" y="197" width="6.2500%" height="15" fill="rgb(208,71,4)"/><text x="62.7500%" y="207.50">core::pt..</text></g><g><title>all (16 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(221,205,45)"/><text x="0.2500%" y="671.50"></text></g><g><title>group-f2b402fe5 (16 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(215,132,38)"/><text x="0.2500%" y="655.50">group-f2b402fe5</text></g><g><title>_start (16 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(227,158,6)"/><text x="0.2500%" y="639.50">_start</text></g><g><title>__libc_start_main (16 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(250,10,38)"/><text x="0.2500%" y="623.50">__libc_start_main</text></g><g><title>main (16 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(225,171,40)"/><text x="0.2500%" y="607.50">main</text></g><g><title>std::rt::lang_start_internal (16 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(238,17,43)"/><text x="0.2500%" y="591.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (16 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(208,145,4)"/><text x="0.2500%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (16 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(232,82,7)"/><text x="0.2500%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (16 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(205,166,38)"/><text x="0.2500%" y="543.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (16 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(240,228,4)"/><text x="0.2500%" y="527.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (16 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(233,121,40)"/><text x="0.2500%" y="511.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (16 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(243,84,30)"/><text x="0.2500%" y="495.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (16 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(235,81,48)"/><text x="0.2500%" y="479.50">core::ops::function::FnOnce::call_once</text></g><g><title>group::main (16 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(218,137,0)"/><text x="0.2500%" y="463.50">group::main</text></g><g><title>group::bench_main (16 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(223,151,48)"/><text x="0.2500%" y="447.50">group::bench_main</text></g><g><title>group::time (16 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(247,30,19)"/><text x="0.2500%" y="431.50">group::time</text></g><g><title>group::bench_main::{{closure}} (16 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(205,129,29)"/><text x="0.2500%" y="415.50">group::bench_main::{{closure}}</text></g><g><title>core::ptr::drop_in_place&lt;(openmls::framing::ciphertext::MlsCiphertext,usize,alloc::vec::Vec&lt;openmls::group::mls_group::MlsGroup&gt;,group::Setup)&gt; (16 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(222,29,2)"/><text x="0.2500%" y="399.50">core::ptr::drop_in_place&lt;(openmls::framing::ciphertext::MlsCiphertext,usize,alloc::vec::Vec&lt;openmls::group::mls_group::MlsGroup&gt;,group::Setup)&gt;</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;openmls::group::mls_group::MlsGroup&gt;&gt; (16 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(232,145,33)"/><text x="0.2500%" y="383.50">core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;openmls::group::mls_group::MlsGroup&gt;&gt;</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(217,30,31)"/><text x="0.2500%" y="367.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop</text></g><g><title>core::ptr::drop_in_place&lt;[openmls::group::mls_group::MlsGroup]&gt; (16 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(243,22,52)"/><text x="0.2500%" y="351.50">core::ptr::drop_in_place&lt;[openmls::group::mls_group::MlsGroup]&gt;</text></g><g><title>core::ptr::drop_in_place&lt;openmls::group::mls_group::MlsGroup&gt; (16 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(254,228,14)"/><text x="0.2500%" y="335.50">core::ptr::drop_in_place&lt;openmls::group::mls_group::MlsGroup&gt;</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;openmls::tree::RatchetTree&gt;&gt; (16 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(231,45,50)"/><text x="0.2500%" y="319.50">core::ptr::drop_in_place&lt;core::cell::RefCell&lt;openmls::tree::RatchetTree&gt;&gt;</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;openmls::tree::RatchetTree&gt;&gt; (16 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(248,125,3)"/><text x="0.2500%" y="303.50">core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;openmls::tree::RatchetTree&gt;&gt;</text></g><g><title>core::ptr::drop_in_place&lt;openmls::tree::RatchetTree&gt; (16 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(213,76,9)"/><text x="0.2500%" y="287.50">core::ptr::drop_in_place&lt;openmls::tree::RatchetTree&gt;</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;openmls::tree::node::Node&gt;&gt; (16 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(238,108,21)"/><text x="0.2500%" y="271.50">core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;openmls::tree::node::Node&gt;&gt;</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;openmls::tree::node::Node&gt;&gt; (5 samples, 31.25%)</title><rect x="68.7500%" y="245" width="31.2500%" height="15" fill="rgb(229,214,19)"/><text x="69.0000%" y="255.50">core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;op..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 31.25%)</title><rect x="68.7500%" y="229" width="31.2500%" height="15" fill="rgb(252,201,5)"/><text x="69.0000%" y="239.50">&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::D..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 31.25%)</title><rect x="68.7500%" y="213" width="31.2500%" height="15" fill="rgb(233,165,49)"/><text x="69.0000%" y="223.50">&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::..</text></g><g><title>alloc::alloc::dealloc (5 samples, 31.25%)</title><rect x="68.7500%" y="197" width="31.2500%" height="15" fill="rgb(208,165,19)"/><text x="69.0000%" y="207.50">alloc::alloc::dealloc</text></g><g><title>cfree@GLIBC_2.2.5 (5 samples, 31.25%)</title><rect x="68.7500%" y="181" width="31.2500%" height="15" fill="rgb(216,220,31)"/><text x="69.0000%" y="191.50">cfree@GLIBC_2.2.5</text></g><g><title>_int_free (5 samples, 31.25%)</title><rect x="68.7500%" y="165" width="31.2500%" height="15" fill="rgb(214,8,31)"/><text x="69.0000%" y="175.50">_int_free</text></g><g><title>malloc_consolidate (5 samples, 31.25%)</title><rect x="68.7500%" y="149" width="31.2500%" height="15" fill="rgb(220,32,32)"/><text x="69.0000%" y="159.50">malloc_consolidate</text></g><g><title>unlink_chunk.constprop.0 (2 samples, 12.50%)</title><rect x="87.5000%" y="133" width="12.5000%" height="15" fill="rgb(237,172,34)"/><text x="87.7500%" y="143.50">unlink_chunk.constp..</text></g></svg></svg>