<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="773.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="773.00"> </text><svg id="frames" x="10" width="1180"><g><title>openmls::group::mls_group::MlsGroup::apply_commit (1 samples, 1.69%)</title><rect x="0.0000%" y="453" width="1.6949%" height="15" fill="rgb(252,179,29)"/><text x="0.2500%" y="463.50"></text></g><g><title>openmls::group::mls_group::apply_commit::&lt;impl openmls::group::mls_group::MlsGroup&gt;::apply_commit_internal (1 samples, 1.69%)</title><rect x="0.0000%" y="437" width="1.6949%" height="15" fill="rgb(238,194,6)"/><text x="0.2500%" y="447.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash (1 samples, 1.69%)</title><rect x="0.0000%" y="421" width="1.6949%" height="15" fill="rgb(238,164,29)"/><text x="0.2500%" y="431.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 1.69%)</title><rect x="0.0000%" y="405" width="1.6949%" height="15" fill="rgb(224,25,9)"/><text x="0.2500%" y="415.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 1.69%)</title><rect x="0.0000%" y="389" width="1.6949%" height="15" fill="rgb(244,153,23)"/><text x="0.2500%" y="399.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 1.69%)</title><rect x="0.0000%" y="373" width="1.6949%" height="15" fill="rgb(212,203,14)"/><text x="0.2500%" y="383.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 1.69%)</title><rect x="0.0000%" y="357" width="1.6949%" height="15" fill="rgb(220,164,20)"/><text x="0.2500%" y="367.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 1.69%)</title><rect x="0.0000%" y="341" width="1.6949%" height="15" fill="rgb(222,203,48)"/><text x="0.2500%" y="351.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 1.69%)</title><rect x="0.0000%" y="325" width="1.6949%" height="15" fill="rgb(215,159,22)"/><text x="0.2500%" y="335.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 1.69%)</title><rect x="0.0000%" y="309" width="1.6949%" height="15" fill="rgb(216,183,47)"/><text x="0.2500%" y="319.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 1.69%)</title><rect x="0.0000%" y="293" width="1.6949%" height="15" fill="rgb(229,195,25)"/><text x="0.2500%" y="303.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 1.69%)</title><rect x="0.0000%" y="277" width="1.6949%" height="15" fill="rgb(224,132,51)"/><text x="0.2500%" y="287.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 1.69%)</title><rect x="0.0000%" y="261" width="1.6949%" height="15" fill="rgb(240,63,7)"/><text x="0.2500%" y="271.50"></text></g><g><title>openmls::tree::hashes::LeafNodeHashInput::hash (1 samples, 1.69%)</title><rect x="0.0000%" y="245" width="1.6949%" height="15" fill="rgb(249,182,41)"/><text x="0.2500%" y="255.50"></text></g><g><title>openmls::ciphersuite::Ciphersuite::hash (1 samples, 1.69%)</title><rect x="0.0000%" y="229" width="1.6949%" height="15" fill="rgb(243,47,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>evercrypt::digest::hash (1 samples, 1.69%)</title><rect x="0.0000%" y="213" width="1.6949%" height="15" fill="rgb(233,48,2)"/><text x="0.2500%" y="223.50"></text></g><g><title>EverCrypt_Hash_hash_256 (1 samples, 1.69%)</title><rect x="0.0000%" y="197" width="1.6949%" height="15" fill="rgb(244,165,34)"/><text x="0.2500%" y="207.50"></text></g><g><title>Hacl_Hash_SHA2_update_multi_256 (1 samples, 1.69%)</title><rect x="0.0000%" y="181" width="1.6949%" height="15" fill="rgb(207,89,7)"/><text x="0.2500%" y="191.50"></text></g><g><title>Hacl_Hash_Core_SHA2_update_224 (1 samples, 1.69%)</title><rect x="0.0000%" y="165" width="1.6949%" height="15" fill="rgb(244,117,36)"/><text x="0.2500%" y="175.50"></text></g><g><title>openmls::framing::plaintext::MlsPlaintext::add_membership_tag (1 samples, 1.69%)</title><rect x="1.6949%" y="421" width="1.6949%" height="15" fill="rgb(226,144,34)"/><text x="1.9449%" y="431.50"></text></g><g><title>openmls::schedule::MembershipKey::tag (1 samples, 1.69%)</title><rect x="1.6949%" y="405" width="1.6949%" height="15" fill="rgb(213,23,19)"/><text x="1.9449%" y="415.50"></text></g><g><title>openmls::ciphersuite::Mac::new (1 samples, 1.69%)</title><rect x="1.6949%" y="389" width="1.6949%" height="15" fill="rgb(217,75,12)"/><text x="1.9449%" y="399.50"></text></g><g><title>openmls::ciphersuite::Secret::hkdf_extract (1 samples, 1.69%)</title><rect x="1.6949%" y="373" width="1.6949%" height="15" fill="rgb(224,159,17)"/><text x="1.9449%" y="383.50"></text></g><g><title>evercrypt::hkdf::extract (1 samples, 1.69%)</title><rect x="1.6949%" y="357" width="1.6949%" height="15" fill="rgb(217,118,1)"/><text x="1.9449%" y="367.50"></text></g><g><title>EverCrypt_HMAC_compute_sha2_256 (1 samples, 1.69%)</title><rect x="1.6949%" y="341" width="1.6949%" height="15" fill="rgb(232,180,48)"/><text x="1.9449%" y="351.50"></text></g><g><title>EverCrypt_Hash_update_last_256 (1 samples, 1.69%)</title><rect x="1.6949%" y="325" width="1.6949%" height="15" fill="rgb(230,27,33)"/><text x="1.9449%" y="335.50"></text></g><g><title>Hacl_Hash_SHA2_update_multi_256 (1 samples, 1.69%)</title><rect x="1.6949%" y="309" width="1.6949%" height="15" fill="rgb(205,31,21)"/><text x="1.9449%" y="319.50"></text></g><g><title>Hacl_Hash_Core_SHA2_update_224 (1 samples, 1.69%)</title><rect x="1.6949%" y="293" width="1.6949%" height="15" fill="rgb(253,59,4)"/><text x="1.9449%" y="303.50"></text></g><g><title>Hacl_Impl_Ed25519_PointAdd_point_add (7 samples, 11.86%)</title><rect x="3.3898%" y="229" width="11.8644%" height="15" fill="rgb(224,201,9)"/><text x="3.6398%" y="239.50">Hacl_Impl_Ed25519_..</text></g><g><title>fmul0 (7 samples, 11.86%)</title><rect x="3.3898%" y="213" width="11.8644%" height="15" fill="rgb(229,206,30)"/><text x="3.6398%" y="223.50">fmul0</text></g><g><title>Hacl_Impl_Curve25519_Field51_fmul (7 samples, 11.86%)</title><rect x="3.3898%" y="197" width="11.8644%" height="15" fill="rgb(212,67,47)"/><text x="3.6398%" y="207.50">Hacl_Impl_Curve255..</text></g><g><title>FStar_UInt128_shift_right (7 samples, 11.86%)</title><rect x="3.3898%" y="181" width="11.8644%" height="15" fill="rgb(211,96,50)"/><text x="3.6398%" y="191.50">FStar_UInt128_shif..</text></g><g><title>Hacl_Impl_Curve25519_Field51_fmul1 (1 samples, 1.69%)</title><rect x="15.2542%" y="213" width="1.6949%" height="15" fill="rgb(252,114,18)"/><text x="15.5042%" y="223.50"></text></g><g><title>FStar_UInt128_add (1 samples, 1.69%)</title><rect x="15.2542%" y="197" width="1.6949%" height="15" fill="rgb(223,58,37)"/><text x="15.5042%" y="207.50"></text></g><g><title>sign_step_1 (12 samples, 20.34%)</title><rect x="3.3898%" y="293" width="20.3390%" height="15" fill="rgb(237,70,4)"/><text x="3.6398%" y="303.50">sign_step_1</text></g><g><title>point_mul_g_compress (12 samples, 20.34%)</title><rect x="3.3898%" y="277" width="20.3390%" height="15" fill="rgb(244,85,46)"/><text x="3.6398%" y="287.50">point_mul_g_compress</text></g><g><title>point_mul_g (12 samples, 20.34%)</title><rect x="3.3898%" y="261" width="20.3390%" height="15" fill="rgb(223,39,52)"/><text x="3.6398%" y="271.50">point_mul_g</text></g><g><title>Hacl_Impl_Ed25519_Ladder_point_mul (12 samples, 20.34%)</title><rect x="3.3898%" y="245" width="20.3390%" height="15" fill="rgb(218,200,14)"/><text x="3.6398%" y="255.50">Hacl_Impl_Ed25519_Ladder_point_m..</text></g><g><title>point_double (5 samples, 8.47%)</title><rect x="15.2542%" y="229" width="8.4746%" height="15" fill="rgb(208,171,16)"/><text x="15.5042%" y="239.50">point_double</text></g><g><title>fmul0 (4 samples, 6.78%)</title><rect x="16.9492%" y="213" width="6.7797%" height="15" fill="rgb(234,200,18)"/><text x="17.1992%" y="223.50">fmul0</text></g><g><title>Hacl_Impl_Curve25519_Field51_fmul (4 samples, 6.78%)</title><rect x="16.9492%" y="197" width="6.7797%" height="15" fill="rgb(228,45,11)"/><text x="17.1992%" y="207.50">Hacl_Impl..</text></g><g><title>FStar_UInt128_mul_wide (4 samples, 6.78%)</title><rect x="16.9492%" y="181" width="6.7797%" height="15" fill="rgb(237,182,11)"/><text x="17.1992%" y="191.50">FStar_UIn..</text></g><g><title>sign_step_2 (1 samples, 1.69%)</title><rect x="23.7288%" y="293" width="1.6949%" height="15" fill="rgb(241,175,49)"/><text x="23.9788%" y="303.50"></text></g><g><title>sha512_modq_pre (1 samples, 1.69%)</title><rect x="23.7288%" y="277" width="1.6949%" height="15" fill="rgb(247,38,35)"/><text x="23.9788%" y="287.50"></text></g><g><title>sha512_pre_msg (1 samples, 1.69%)</title><rect x="23.7288%" y="261" width="1.6949%" height="15" fill="rgb(228,39,49)"/><text x="23.9788%" y="271.50"></text></g><g><title>Hacl_Hash_SHA2_hash_512 (1 samples, 1.69%)</title><rect x="23.7288%" y="245" width="1.6949%" height="15" fill="rgb(226,101,26)"/><text x="23.9788%" y="255.50"></text></g><g><title>Hacl_Hash_SHA2_update_multi_512 (1 samples, 1.69%)</title><rect x="23.7288%" y="229" width="1.6949%" height="15" fill="rgb(206,141,19)"/><text x="23.9788%" y="239.50"></text></g><g><title>Hacl_Hash_Core_SHA2_update_384 (1 samples, 1.69%)</title><rect x="23.7288%" y="213" width="1.6949%" height="15" fill="rgb(211,200,13)"/><text x="23.9788%" y="223.50"></text></g><g><title>Hacl_Impl_Ed25519_PointAdd_point_add (13 samples, 22.03%)</title><rect x="25.4237%" y="229" width="22.0339%" height="15" fill="rgb(241,121,6)"/><text x="25.6737%" y="239.50">Hacl_Impl_Ed25519_PointAdd_point_add</text></g><g><title>fmul0 (13 samples, 22.03%)</title><rect x="25.4237%" y="213" width="22.0339%" height="15" fill="rgb(234,221,29)"/><text x="25.6737%" y="223.50">fmul0</text></g><g><title>fsquare (5 samples, 8.47%)</title><rect x="57.6271%" y="213" width="8.4746%" height="15" fill="rgb(229,136,5)"/><text x="57.8771%" y="223.50">fsquare</text></g><g><title>Hacl_Impl_Curve25519_Field51_fsqr (5 samples, 8.47%)</title><rect x="57.6271%" y="197" width="8.4746%" height="15" fill="rgb(238,36,11)"/><text x="57.8771%" y="207.50">Hacl_Impl_Cu..</text></g><g><title>FStar_UInt128_add (5 samples, 8.47%)</title><rect x="57.6271%" y="181" width="8.4746%" height="15" fill="rgb(251,55,41)"/><text x="57.8771%" y="191.50">FStar_UInt12..</text></g><g><title>openmls::group::mls_group::MlsGroup::create_add_proposal (39 samples, 66.10%)</title><rect x="1.6949%" y="453" width="66.1017%" height="15" fill="rgb(242,34,40)"/><text x="1.9449%" y="463.50">openmls::group::mls_group::MlsGroup::create_add_proposal</text></g><g><title>openmls::framing::plaintext::MlsPlaintext::new_from_proposal_member (39 samples, 66.10%)</title><rect x="1.6949%" y="437" width="66.1017%" height="15" fill="rgb(215,42,17)"/><text x="1.9449%" y="447.50">openmls::framing::plaintext::MlsPlaintext::new_from_proposal_member</text></g><g><title>openmls::framing::plaintext::MlsPlaintext::new_from_member (38 samples, 64.41%)</title><rect x="3.3898%" y="421" width="64.4068%" height="15" fill="rgb(207,44,46)"/><text x="3.6398%" y="431.50">openmls::framing::plaintext::MlsPlaintext::new_from_member</text></g><g><title>openmls::framing::plaintext::MlsPlaintext::sign_from_member (38 samples, 64.41%)</title><rect x="3.3898%" y="405" width="64.4068%" height="15" fill="rgb(211,206,28)"/><text x="3.6398%" y="415.50">openmls::framing::plaintext::MlsPlaintext::sign_from_member</text></g><g><title>openmls::framing::plaintext::MlsPlaintextTbs::sign (38 samples, 64.41%)</title><rect x="3.3898%" y="389" width="64.4068%" height="15" fill="rgb(237,167,16)"/><text x="3.6398%" y="399.50">openmls::framing::plaintext::MlsPlaintextTbs::sign</text></g><g><title>openmls::credentials::CredentialBundle::sign (38 samples, 64.41%)</title><rect x="3.3898%" y="373" width="64.4068%" height="15" fill="rgb(233,66,6)"/><text x="3.6398%" y="383.50">openmls::credentials::CredentialBundle::sign</text></g><g><title>openmls::ciphersuite::SignaturePrivateKey::sign (38 samples, 64.41%)</title><rect x="3.3898%" y="357" width="64.4068%" height="15" fill="rgb(246,123,29)"/><text x="3.6398%" y="367.50">openmls::ciphersuite::SignaturePrivateKey::sign</text></g><g><title>evercrypt::signature::sign (38 samples, 64.41%)</title><rect x="3.3898%" y="341" width="64.4068%" height="15" fill="rgb(209,62,40)"/><text x="3.6398%" y="351.50">evercrypt::signature::sign</text></g><g><title>evercrypt::ed25519::eddsa_sign (38 samples, 64.41%)</title><rect x="3.3898%" y="325" width="64.4068%" height="15" fill="rgb(218,4,25)"/><text x="3.6398%" y="335.50">evercrypt::ed25519::eddsa_sign</text></g><g><title>Hacl_Ed25519_sign (38 samples, 64.41%)</title><rect x="3.3898%" y="309" width="64.4068%" height="15" fill="rgb(253,91,49)"/><text x="3.6398%" y="319.50">Hacl_Ed25519_sign</text></g><g><title>sign_step_3 (25 samples, 42.37%)</title><rect x="25.4237%" y="293" width="42.3729%" height="15" fill="rgb(228,155,29)"/><text x="25.6737%" y="303.50">sign_step_3</text></g><g><title>point_mul_g_compress (25 samples, 42.37%)</title><rect x="25.4237%" y="277" width="42.3729%" height="15" fill="rgb(243,57,37)"/><text x="25.6737%" y="287.50">point_mul_g_compress</text></g><g><title>point_mul_g (25 samples, 42.37%)</title><rect x="25.4237%" y="261" width="42.3729%" height="15" fill="rgb(244,167,17)"/><text x="25.6737%" y="271.50">point_mul_g</text></g><g><title>Hacl_Impl_Ed25519_Ladder_point_mul (25 samples, 42.37%)</title><rect x="25.4237%" y="245" width="42.3729%" height="15" fill="rgb(207,181,38)"/><text x="25.6737%" y="255.50">Hacl_Impl_Ed25519_Ladder_point_mul</text></g><g><title>point_double (12 samples, 20.34%)</title><rect x="47.4576%" y="229" width="20.3390%" height="15" fill="rgb(211,8,23)"/><text x="47.7076%" y="239.50">point_double</text></g><g><title>fsum (1 samples, 1.69%)</title><rect x="66.1017%" y="213" width="1.6949%" height="15" fill="rgb(235,11,44)"/><text x="66.3517%" y="223.50"></text></g><g><title>Hacl_Impl_Curve25519_Field51_fadd (1 samples, 1.69%)</title><rect x="66.1017%" y="197" width="1.6949%" height="15" fill="rgb(248,18,52)"/><text x="66.3517%" y="207.50"></text></g><g><title>hpke_rs::dh_kem::DhKem::dh_base (6 samples, 10.17%)</title><rect x="67.7966%" y="165" width="10.1695%" height="15" fill="rgb(208,4,7)"/><text x="68.0466%" y="175.50">hpke_rs::dh_kem..</text></g><g><title>evercrypt::ecdh::derive_base (6 samples, 10.17%)</title><rect x="67.7966%" y="149" width="10.1695%" height="15" fill="rgb(240,17,39)"/><text x="68.0466%" y="159.50">evercrypt::ecdh..</text></g><g><title>evercrypt::x25519::dh_base (6 samples, 10.17%)</title><rect x="67.7966%" y="133" width="10.1695%" height="15" fill="rgb(207,170,3)"/><text x="68.0466%" y="143.50">evercrypt::x255..</text></g><g><title>Hacl_Curve25519_51_secret_to_public (6 samples, 10.17%)</title><rect x="67.7966%" y="117" width="10.1695%" height="15" fill="rgb(236,100,52)"/><text x="68.0466%" y="127.50">Hacl_Curve25519..</text></g><g><title>Hacl_Curve25519_51_scalarmult (6 samples, 10.17%)</title><rect x="67.7966%" y="101" width="10.1695%" height="15" fill="rgb(246,78,51)"/><text x="68.0466%" y="111.50">Hacl_Curve25519..</text></g><g><title>montgomery_ladder (6 samples, 10.17%)</title><rect x="67.7966%" y="85" width="10.1695%" height="15" fill="rgb(211,17,15)"/><text x="68.0466%" y="95.50">montgomery_ladd..</text></g><g><title>point_add_and_double (6 samples, 10.17%)</title><rect x="67.7966%" y="69" width="10.1695%" height="15" fill="rgb(209,59,46)"/><text x="68.0466%" y="79.50">point_add_and_d..</text></g><g><title>fmul20 (6 samples, 10.17%)</title><rect x="67.7966%" y="53" width="10.1695%" height="15" fill="rgb(210,92,25)"/><text x="68.0466%" y="63.50">fmul20</text></g><g><title>FStar_UInt128_add (6 samples, 10.17%)</title><rect x="67.7966%" y="37" width="10.1695%" height="15" fill="rgb(238,174,52)"/><text x="68.0466%" y="47.50">FStar_UInt128_a..</text></g><g><title>hpke_rs::kdf::Kdf::labeled_expand (1 samples, 1.69%)</title><rect x="77.9661%" y="165" width="1.6949%" height="15" fill="rgb(230,73,7)"/><text x="78.2161%" y="175.50"></text></g><g><title>&lt;hpke_rs::hkdf::HkdfSha256 as hpke_rs::kdf::KdfTrait&gt;::expand (1 samples, 1.69%)</title><rect x="77.9661%" y="149" width="1.6949%" height="15" fill="rgb(243,124,40)"/><text x="78.2161%" y="159.50"></text></g><g><title>evercrypt::hkdf::expand (1 samples, 1.69%)</title><rect x="77.9661%" y="133" width="1.6949%" height="15" fill="rgb(244,170,11)"/><text x="78.2161%" y="143.50"></text></g><g><title>EverCrypt_HKDF_expand_sha2_256 (1 samples, 1.69%)</title><rect x="77.9661%" y="117" width="1.6949%" height="15" fill="rgb(207,114,54)"/><text x="78.2161%" y="127.50"></text></g><g><title>EverCrypt_HMAC_compute_sha2_256 (1 samples, 1.69%)</title><rect x="77.9661%" y="101" width="1.6949%" height="15" fill="rgb(205,42,20)"/><text x="78.2161%" y="111.50"></text></g><g><title>Hacl_Hash_SHA2_update_multi_256 (1 samples, 1.69%)</title><rect x="77.9661%" y="85" width="1.6949%" height="15" fill="rgb(230,30,28)"/><text x="78.2161%" y="95.50"></text></g><g><title>Hacl_Hash_Core_SHA2_update_224 (1 samples, 1.69%)</title><rect x="77.9661%" y="69" width="1.6949%" height="15" fill="rgb(205,73,54)"/><text x="78.2161%" y="79.50"></text></g><g><title>&lt;hpke_rs::dh_kem::DhKem as hpke_rs::kem::KemTrait&gt;::derive_key_pair (8 samples, 13.56%)</title><rect x="67.7966%" y="181" width="13.5593%" height="15" fill="rgb(254,227,23)"/><text x="68.0466%" y="191.50">&lt;hpke_rs::dh_kem::Dh..</text></g><g><title>hpke_rs::kdf::Kdf::labeled_extract (1 samples, 1.69%)</title><rect x="79.6610%" y="165" width="1.6949%" height="15" fill="rgb(228,202,34)"/><text x="79.9110%" y="175.50"></text></g><g><title>hpke_rs::util::concat (1 samples, 1.69%)</title><rect x="79.6610%" y="149" width="1.6949%" height="15" fill="rgb(222,225,37)"/><text x="79.9110%" y="159.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::join (1 samples, 1.69%)</title><rect x="79.6610%" y="133" width="1.6949%" height="15" fill="rgb(221,14,54)"/><text x="79.9110%" y="143.50"></text></g><g><title>&lt;[V] as alloc::slice::Join&lt;&amp;[T]&gt;&gt;::join (1 samples, 1.69%)</title><rect x="79.6610%" y="117" width="1.6949%" height="15" fill="rgb(254,102,2)"/><text x="79.9110%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 1.69%)</title><rect x="79.6610%" y="101" width="1.6949%" height="15" fill="rgb(232,104,17)"/><text x="79.9110%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 1.69%)</title><rect x="79.6610%" y="85" width="1.6949%" height="15" fill="rgb(250,220,14)"/><text x="79.9110%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 1.69%)</title><rect x="79.6610%" y="69" width="1.6949%" height="15" fill="rgb(241,158,9)"/><text x="79.9110%" y="79.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 1.69%)</title><rect x="79.6610%" y="53" width="1.6949%" height="15" fill="rgb(246,9,43)"/><text x="79.9110%" y="63.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 1.69%)</title><rect x="79.6610%" y="37" width="1.6949%" height="15" fill="rgb(206,73,33)"/><text x="79.9110%" y="47.50"></text></g><g><title>encode_point (1 samples, 1.69%)</title><rect x="81.3559%" y="101" width="1.6949%" height="15" fill="rgb(222,79,8)"/><text x="81.6059%" y="111.50"></text></g><g><title>Hacl_Curve25519_51_finv (1 samples, 1.69%)</title><rect x="81.3559%" y="85" width="1.6949%" height="15" fill="rgb(234,8,54)"/><text x="81.6059%" y="95.50"></text></g><g><title>Hacl_Curve25519_51_fsquare_times (1 samples, 1.69%)</title><rect x="81.3559%" y="69" width="1.6949%" height="15" fill="rgb(209,134,38)"/><text x="81.6059%" y="79.50"></text></g><g><title>Hacl_Impl_Curve25519_Field51_fsqr (1 samples, 1.69%)</title><rect x="81.3559%" y="53" width="1.6949%" height="15" fill="rgb(230,127,29)"/><text x="81.6059%" y="63.50"></text></g><g><title>FStar_UInt128_add (1 samples, 1.69%)</title><rect x="81.3559%" y="37" width="1.6949%" height="15" fill="rgb(242,44,41)"/><text x="81.6059%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (16 samples, 27.12%)</title><rect x="67.7966%" y="421" width="27.1186%" height="15" fill="rgb(222,56,43)"/><text x="68.0466%" y="431.50">core::iter::traits::iterator::Iterator::col..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (16 samples, 27.12%)</title><rect x="67.7966%" y="405" width="27.1186%" height="15" fill="rgb(238,39,47)"/><text x="68.0466%" y="415.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 27.12%)</title><rect x="67.7966%" y="389" width="27.1186%" height="15" fill="rgb(226,79,43)"/><text x="68.0466%" y="399.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_fro..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (16 samples, 27.12%)</title><rect x="67.7966%" y="373" width="27.1186%" height="15" fill="rgb(242,105,53)"/><text x="68.0466%" y="383.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_fro..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (16 samples, 27.12%)</title><rect x="67.7966%" y="357" width="27.1186%" height="15" fill="rgb(251,132,46)"/><text x="68.0466%" y="367.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_e..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (16 samples, 27.12%)</title><rect x="67.7966%" y="341" width="27.1186%" height="15" fill="rgb(231,77,14)"/><text x="68.0466%" y="351.50">core::iter::traits::iterator::Iterator::for..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 27.12%)</title><rect x="67.7966%" y="325" width="27.1186%" height="15" fill="rgb(240,135,9)"/><text x="68.0466%" y="335.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as cor..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (16 samples, 27.12%)</title><rect x="67.7966%" y="309" width="27.1186%" height="15" fill="rgb(248,109,14)"/><text x="68.0466%" y="319.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (16 samples, 27.12%)</title><rect x="67.7966%" y="293" width="27.1186%" height="15" fill="rgb(227,146,52)"/><text x="68.0466%" y="303.50">core::iter::adapters::map::map_fold::{{clos..</text></g><g><title>openmls::group::mls_group::create_commit::&lt;impl openmls::group::mls_group::MlsGroup&gt;::create_commit_internal::{{closure}} (16 samples, 27.12%)</title><rect x="67.7966%" y="277" width="27.1186%" height="15" fill="rgb(232,54,3)"/><text x="68.0466%" y="287.50">openmls::group::mls_group::create_commit::&lt;..</text></g><g><title>openmls::ciphersuite::Ciphersuite::hpke_seal (16 samples, 27.12%)</title><rect x="67.7966%" y="261" width="27.1186%" height="15" fill="rgb(229,201,43)"/><text x="68.0466%" y="271.50">openmls::ciphersuite::Ciphersuite::hpke_seal</text></g><g><title>hpke_rs::Hpke::seal (16 samples, 27.12%)</title><rect x="67.7966%" y="245" width="27.1186%" height="15" fill="rgb(252,161,33)"/><text x="68.0466%" y="255.50">hpke_rs::Hpke::seal</text></g><g><title>hpke_rs::Hpke::setup_sender (16 samples, 27.12%)</title><rect x="67.7966%" y="229" width="27.1186%" height="15" fill="rgb(226,146,40)"/><text x="68.0466%" y="239.50">hpke_rs::Hpke::setup_sender</text></g><g><title>hpke_rs::kem::Kem::encaps (16 samples, 27.12%)</title><rect x="67.7966%" y="213" width="27.1186%" height="15" fill="rgb(219,47,25)"/><text x="68.0466%" y="223.50">hpke_rs::kem::Kem::encaps</text></g><g><title>&lt;hpke_rs::dh_kem::DhKem as hpke_rs::kem::KemTrait&gt;::encaps (16 samples, 27.12%)</title><rect x="67.7966%" y="197" width="27.1186%" height="15" fill="rgb(250,135,13)"/><text x="68.0466%" y="207.50">&lt;hpke_rs::dh_kem::DhKem as hpke_rs::kem::Ke..</text></g><g><title>hpke_rs::dh_kem::DhKem::dh (8 samples, 13.56%)</title><rect x="81.3559%" y="181" width="13.5593%" height="15" fill="rgb(219,229,18)"/><text x="81.6059%" y="191.50">hpke_rs::dh_kem::DhK..</text></g><g><title>evercrypt::ecdh::derive (8 samples, 13.56%)</title><rect x="81.3559%" y="165" width="13.5593%" height="15" fill="rgb(217,152,27)"/><text x="81.6059%" y="175.50">evercrypt::ecdh::der..</text></g><g><title>evercrypt::x25519::dh (8 samples, 13.56%)</title><rect x="81.3559%" y="149" width="13.5593%" height="15" fill="rgb(225,71,47)"/><text x="81.6059%" y="159.50">evercrypt::x25519::dh</text></g><g><title>Hacl_Curve25519_51_ecdh (8 samples, 13.56%)</title><rect x="81.3559%" y="133" width="13.5593%" height="15" fill="rgb(220,139,14)"/><text x="81.6059%" y="143.50">Hacl_Curve25519_51_e..</text></g><g><title>Hacl_Curve25519_51_scalarmult (8 samples, 13.56%)</title><rect x="81.3559%" y="117" width="13.5593%" height="15" fill="rgb(247,54,32)"/><text x="81.6059%" y="127.50">Hacl_Curve25519_51_s..</text></g><g><title>montgomery_ladder (7 samples, 11.86%)</title><rect x="83.0508%" y="101" width="11.8644%" height="15" fill="rgb(252,131,39)"/><text x="83.3008%" y="111.50">montgomery_ladder</text></g><g><title>point_add_and_double (7 samples, 11.86%)</title><rect x="83.0508%" y="85" width="11.8644%" height="15" fill="rgb(210,108,39)"/><text x="83.3008%" y="95.50">point_add_and_doub..</text></g><g><title>fmul20 (7 samples, 11.86%)</title><rect x="83.0508%" y="69" width="11.8644%" height="15" fill="rgb(205,23,29)"/><text x="83.3008%" y="79.50">fmul20</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;openmls::group::mls_group::create_commit::PlaintextSecret&gt;&gt; (1 samples, 1.69%)</title><rect x="94.9153%" y="421" width="1.6949%" height="15" fill="rgb(246,139,46)"/><text x="95.1653%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.69%)</title><rect x="94.9153%" y="405" width="1.6949%" height="15" fill="rgb(250,81,26)"/><text x="95.1653%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;[openmls::group::mls_group::create_commit::PlaintextSecret]&gt; (1 samples, 1.69%)</title><rect x="94.9153%" y="389" width="1.6949%" height="15" fill="rgb(214,104,7)"/><text x="95.1653%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;openmls::group::mls_group::create_commit::PlaintextSecret&gt; (1 samples, 1.69%)</title><rect x="94.9153%" y="373" width="1.6949%" height="15" fill="rgb(233,189,8)"/><text x="95.1653%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;hpke_rs::HpkePublicKey&gt; (1 samples, 1.69%)</title><rect x="94.9153%" y="357" width="1.6949%" height="15" fill="rgb(228,141,17)"/><text x="95.1653%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 1.69%)</title><rect x="94.9153%" y="341" width="1.6949%" height="15" fill="rgb(247,157,1)"/><text x="95.1653%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 1.69%)</title><rect x="94.9153%" y="325" width="1.6949%" height="15" fill="rgb(249,225,5)"/><text x="95.1653%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.69%)</title><rect x="94.9153%" y="309" width="1.6949%" height="15" fill="rgb(242,55,13)"/><text x="95.1653%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 1.69%)</title><rect x="94.9153%" y="293" width="1.6949%" height="15" fill="rgb(230,49,50)"/><text x="95.1653%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 1.69%)</title><rect x="94.9153%" y="277" width="1.6949%" height="15" fill="rgb(241,111,38)"/><text x="95.1653%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 1.69%)</title><rect x="94.9153%" y="261" width="1.6949%" height="15" fill="rgb(252,155,4)"/><text x="95.1653%" y="271.50"></text></g><g><title>_int_free (1 samples, 1.69%)</title><rect x="94.9153%" y="245" width="1.6949%" height="15" fill="rgb(212,69,32)"/><text x="95.1653%" y="255.50"></text></g><g><title>openmls::messages::proposals::ProposalQueue::filter_proposals (1 samples, 1.69%)</title><rect x="96.6102%" y="421" width="1.6949%" height="15" fill="rgb(243,107,47)"/><text x="96.8602%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 1.69%)</title><rect x="96.6102%" y="405" width="1.6949%" height="15" fill="rgb(247,130,12)"/><text x="96.8602%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 1.69%)</title><rect x="96.6102%" y="389" width="1.6949%" height="15" fill="rgb(233,74,16)"/><text x="96.8602%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 1.69%)</title><rect x="96.6102%" y="373" width="1.6949%" height="15" fill="rgb(208,58,18)"/><text x="96.8602%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 1.69%)</title><rect x="96.6102%" y="357" width="1.6949%" height="15" fill="rgb(242,225,1)"/><text x="96.8602%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 1.69%)</title><rect x="96.6102%" y="341" width="1.6949%" height="15" fill="rgb(249,39,40)"/><text x="96.8602%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 1.69%)</title><rect x="96.6102%" y="325" width="1.6949%" height="15" fill="rgb(207,72,44)"/><text x="96.8602%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 1.69%)</title><rect x="96.6102%" y="309" width="1.6949%" height="15" fill="rgb(215,193,12)"/><text x="96.8602%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 1.69%)</title><rect x="96.6102%" y="293" width="1.6949%" height="15" fill="rgb(248,41,39)"/><text x="96.8602%" y="303.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 1.69%)</title><rect x="96.6102%" y="277" width="1.6949%" height="15" fill="rgb(253,85,4)"/><text x="96.8602%" y="287.50"></text></g><g><title>openmls::messages::proposals::ProposalQueue::filter_proposals::{{closure}} (1 samples, 1.69%)</title><rect x="96.6102%" y="261" width="1.6949%" height="15" fill="rgb(243,70,31)"/><text x="96.8602%" y="271.50"></text></g><g><title>openmls::messages::proposals::QueuedProposal::from_mls_plaintext (1 samples, 1.69%)</title><rect x="96.6102%" y="245" width="1.6949%" height="15" fill="rgb(253,195,26)"/><text x="96.8602%" y="255.50"></text></g><g><title>openmls::messages::proposals::ProposalReference::from_proposal (1 samples, 1.69%)</title><rect x="96.6102%" y="229" width="1.6949%" height="15" fill="rgb(243,42,11)"/><text x="96.8602%" y="239.50"></text></g><g><title>openmls::ciphersuite::Ciphersuite::hash (1 samples, 1.69%)</title><rect x="96.6102%" y="213" width="1.6949%" height="15" fill="rgb(239,66,17)"/><text x="96.8602%" y="223.50"></text></g><g><title>evercrypt::digest::hash (1 samples, 1.69%)</title><rect x="96.6102%" y="197" width="1.6949%" height="15" fill="rgb(217,132,21)"/><text x="96.8602%" y="207.50"></text></g><g><title>EverCrypt_Hash_hash_256 (1 samples, 1.69%)</title><rect x="96.6102%" y="181" width="1.6949%" height="15" fill="rgb(252,202,21)"/><text x="96.8602%" y="191.50"></text></g><g><title>Hacl_Hash_SHA2_update_multi_256 (1 samples, 1.69%)</title><rect x="96.6102%" y="165" width="1.6949%" height="15" fill="rgb(233,98,36)"/><text x="96.8602%" y="175.50"></text></g><g><title>Hacl_Hash_Core_SHA2_update_224 (1 samples, 1.69%)</title><rect x="96.6102%" y="149" width="1.6949%" height="15" fill="rgb(216,153,54)"/><text x="96.8602%" y="159.50"></text></g><g><title>all (59 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(250,99,7)"/><text x="0.2500%" y="751.50"></text></g><g><title>group-f2b402fe5 (59 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(207,56,50)"/><text x="0.2500%" y="735.50">group-f2b402fe5</text></g><g><title>_start (59 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(244,61,34)"/><text x="0.2500%" y="719.50">_start</text></g><g><title>__libc_start_main (59 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(241,50,38)"/><text x="0.2500%" y="703.50">__libc_start_main</text></g><g><title>main (59 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(212,166,30)"/><text x="0.2500%" y="687.50">main</text></g><g><title>std::rt::lang_start_internal (59 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(249,127,32)"/><text x="0.2500%" y="671.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (59 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(209,103,0)"/><text x="0.2500%" y="655.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (59 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(238,209,51)"/><text x="0.2500%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (59 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(237,56,23)"/><text x="0.2500%" y="623.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (59 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(215,153,46)"/><text x="0.2500%" y="607.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (59 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(224,49,31)"/><text x="0.2500%" y="591.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (59 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(250,18,42)"/><text x="0.2500%" y="575.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (59 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(215,176,39)"/><text x="0.2500%" y="559.50">core::ops::function::FnOnce::call_once</text></g><g><title>group::main (59 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(223,77,29)"/><text x="0.2500%" y="543.50">group::main</text></g><g><title>group::bench_main (59 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(234,94,52)"/><text x="0.2500%" y="527.50">group::bench_main</text></g><g><title>group::time (59 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(220,154,50)"/><text x="0.2500%" y="511.50">group::time</text></g><g><title>group::bench_main::{{closure}} (59 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(212,11,10)"/><text x="0.2500%" y="495.50">group::bench_main::{{closure}}</text></g><g><title>group::setup_group (59 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(205,166,19)"/><text x="0.2500%" y="479.50">group::setup_group</text></g><g><title>openmls::group::mls_group::MlsGroup::create_commit (19 samples, 32.20%)</title><rect x="67.7966%" y="453" width="32.2034%" height="15" fill="rgb(244,198,16)"/><text x="68.0466%" y="463.50">openmls::group::mls_group::MlsGroup::create_commit</text></g><g><title>openmls::group::mls_group::create_commit::&lt;impl openmls::group::mls_group::MlsGroup&gt;::create_commit_internal (19 samples, 32.20%)</title><rect x="67.7966%" y="437" width="32.2034%" height="15" fill="rgb(219,69,12)"/><text x="68.0466%" y="447.50">openmls::group::mls_group::create_commit::&lt;impl open..</text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash (1 samples, 1.69%)</title><rect x="98.3051%" y="421" width="1.6949%" height="15" fill="rgb(245,30,7)"/><text x="98.5551%" y="431.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 1.69%)</title><rect x="98.3051%" y="405" width="1.6949%" height="15" fill="rgb(218,221,48)"/><text x="98.5551%" y="415.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 1.69%)</title><rect x="98.3051%" y="389" width="1.6949%" height="15" fill="rgb(216,66,15)"/><text x="98.5551%" y="399.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 1.69%)</title><rect x="98.3051%" y="373" width="1.6949%" height="15" fill="rgb(226,122,50)"/><text x="98.5551%" y="383.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 1.69%)</title><rect x="98.3051%" y="357" width="1.6949%" height="15" fill="rgb(239,156,16)"/><text x="98.5551%" y="367.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 1.69%)</title><rect x="98.3051%" y="341" width="1.6949%" height="15" fill="rgb(224,27,38)"/><text x="98.5551%" y="351.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 1.69%)</title><rect x="98.3051%" y="325" width="1.6949%" height="15" fill="rgb(224,39,27)"/><text x="98.5551%" y="335.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 1.69%)</title><rect x="98.3051%" y="309" width="1.6949%" height="15" fill="rgb(215,92,29)"/><text x="98.5551%" y="319.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 1.69%)</title><rect x="98.3051%" y="293" width="1.6949%" height="15" fill="rgb(207,159,16)"/><text x="98.5551%" y="303.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 1.69%)</title><rect x="98.3051%" y="277" width="1.6949%" height="15" fill="rgb(238,163,47)"/><text x="98.5551%" y="287.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 1.69%)</title><rect x="98.3051%" y="261" width="1.6949%" height="15" fill="rgb(219,91,49)"/><text x="98.5551%" y="271.50"></text></g><g><title>openmls::tree::hashes::LeafNodeHashInput::hash (1 samples, 1.69%)</title><rect x="98.3051%" y="245" width="1.6949%" height="15" fill="rgb(227,167,31)"/><text x="98.5551%" y="255.50"></text></g><g><title>openmls::ciphersuite::Ciphersuite::hash (1 samples, 1.69%)</title><rect x="98.3051%" y="229" width="1.6949%" height="15" fill="rgb(234,80,54)"/><text x="98.5551%" y="239.50"></text></g><g><title>evercrypt::digest::hash (1 samples, 1.69%)</title><rect x="98.3051%" y="213" width="1.6949%" height="15" fill="rgb(212,114,2)"/><text x="98.5551%" y="223.50"></text></g><g><title>EverCrypt_Hash_hash_256 (1 samples, 1.69%)</title><rect x="98.3051%" y="197" width="1.6949%" height="15" fill="rgb(234,50,24)"/><text x="98.5551%" y="207.50"></text></g><g><title>Hacl_Hash_SHA2_update_multi_256 (1 samples, 1.69%)</title><rect x="98.3051%" y="181" width="1.6949%" height="15" fill="rgb(221,68,8)"/><text x="98.5551%" y="191.50"></text></g><g><title>Hacl_Hash_Core_SHA2_update_224 (1 samples, 1.69%)</title><rect x="98.3051%" y="165" width="1.6949%" height="15" fill="rgb(254,180,31)"/><text x="98.5551%" y="175.50"></text></g></svg></svg>