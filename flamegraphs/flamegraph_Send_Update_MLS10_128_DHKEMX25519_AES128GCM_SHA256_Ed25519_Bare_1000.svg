<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="853.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="853.00"> </text><svg id="frames" x="10" width="1180"><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.94%)</title><rect x="0.0000%" y="469" width="0.9434%" height="15" fill="rgb(213,10,37)"/><text x="0.2500%" y="479.50"></text></g><g><title>_int_free (1 samples, 0.94%)</title><rect x="0.0000%" y="453" width="0.9434%" height="15" fill="rgb(235,143,30)"/><text x="0.2500%" y="463.50"></text></g><g><title>cfree@GLIBC_2.2.5 (5 samples, 4.72%)</title><rect x="1.8868%" y="341" width="4.7170%" height="15" fill="rgb(250,146,33)"/><text x="2.1368%" y="351.50">cfree..</text></g><g><title>_int_free (3 samples, 2.83%)</title><rect x="3.7736%" y="325" width="2.8302%" height="15" fill="rgb(226,198,42)"/><text x="4.0236%" y="335.50">_i..</text></g><g><title>cfree@GLIBC_2.2.5 (8 samples, 7.55%)</title><rect x="7.5472%" y="325" width="7.5472%" height="15" fill="rgb(222,55,6)"/><text x="7.7972%" y="335.50">cfree@GLIB..</text></g><g><title>_int_free (8 samples, 7.55%)</title><rect x="7.5472%" y="309" width="7.5472%" height="15" fill="rgb(213,224,31)"/><text x="7.7972%" y="319.50">_int_free</text></g><g><title>alloc::alloc::box_free (7 samples, 6.60%)</title><rect x="18.8679%" y="261" width="6.6038%" height="15" fill="rgb(226,103,35)"/><text x="19.1179%" y="271.50">alloc::al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 6.60%)</title><rect x="18.8679%" y="245" width="6.6038%" height="15" fill="rgb(205,66,45)"/><text x="19.1179%" y="255.50">&lt;alloc::a..</text></g><g><title>alloc::alloc::dealloc (7 samples, 6.60%)</title><rect x="18.8679%" y="229" width="6.6038%" height="15" fill="rgb(226,51,42)"/><text x="19.1179%" y="239.50">alloc::al..</text></g><g><title>cfree@GLIBC_2.2.5 (6 samples, 5.66%)</title><rect x="19.8113%" y="213" width="5.6604%" height="15" fill="rgb(206,69,1)"/><text x="20.0613%" y="223.50">cfree@G..</text></g><g><title>_int_free (6 samples, 5.66%)</title><rect x="19.8113%" y="197" width="5.6604%" height="15" fill="rgb(213,228,47)"/><text x="20.0613%" y="207.50">_int_fr..</text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 3.77%)</title><rect x="25.4717%" y="261" width="3.7736%" height="15" fill="rgb(224,204,18)"/><text x="25.7217%" y="271.50">cfre..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::boxed::Box&lt;dyn openmls::extensions::Extension&gt;&gt;&gt; (20 samples, 18.87%)</title><rect x="15.0943%" y="325" width="18.8679%" height="15" fill="rgb(253,187,47)"/><text x="15.3443%" y="335.50">core::ptr::drop_in_place&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 18.87%)</title><rect x="15.0943%" y="309" width="18.8679%" height="15" fill="rgb(232,61,2)"/><text x="15.3443%" y="319.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core..</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::boxed::Box&lt;dyn openmls::extensions::Extension&gt;]&gt; (20 samples, 18.87%)</title><rect x="15.0943%" y="293" width="18.8679%" height="15" fill="rgb(213,132,35)"/><text x="15.3443%" y="303.50">core::ptr::drop_in_place&lt;[all..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn openmls::extensions::Extension&gt;&gt; (16 samples, 15.09%)</title><rect x="18.8679%" y="277" width="15.0943%" height="15" fill="rgb(247,33,21)"/><text x="19.1179%" y="287.50">core::ptr::drop_in_plac..</text></g><g><title>core::ptr::drop_in_place&lt;openmls::extensions::capabilities_extension::CapabilitiesExtension&gt; (5 samples, 4.72%)</title><rect x="29.2453%" y="261" width="4.7170%" height="15" fill="rgb(233,71,46)"/><text x="29.4953%" y="271.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;openmls::ciphersuite::CiphersuiteName&gt;&gt; (5 samples, 4.72%)</title><rect x="29.2453%" y="245" width="4.7170%" height="15" fill="rgb(222,173,43)"/><text x="29.4953%" y="255.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;openmls::ciphersuite::CiphersuiteName&gt;&gt; (5 samples, 4.72%)</title><rect x="29.2453%" y="229" width="4.7170%" height="15" fill="rgb(249,218,47)"/><text x="29.4953%" y="239.50">core:..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 4.72%)</title><rect x="29.2453%" y="213" width="4.7170%" height="15" fill="rgb(254,185,48)"/><text x="29.4953%" y="223.50">&lt;allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 4.72%)</title><rect x="29.2453%" y="197" width="4.7170%" height="15" fill="rgb(252,165,50)"/><text x="29.4953%" y="207.50">&lt;allo..</text></g><g><title>alloc::alloc::dealloc (4 samples, 3.77%)</title><rect x="30.1887%" y="181" width="3.7736%" height="15" fill="rgb(206,219,6)"/><text x="30.4387%" y="191.50">allo..</text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 3.77%)</title><rect x="30.1887%" y="165" width="3.7736%" height="15" fill="rgb(212,212,45)"/><text x="30.4387%" y="175.50">cfre..</text></g><g><title>_int_free (2 samples, 1.89%)</title><rect x="32.0755%" y="149" width="1.8868%" height="15" fill="rgb(221,31,9)"/><text x="32.3255%" y="159.50">_..</text></g><g><title>core::ptr::drop_in_place&lt;hpke_rs::HpkePublicKey&gt; (1 samples, 0.94%)</title><rect x="33.9623%" y="325" width="0.9434%" height="15" fill="rgb(234,198,39)"/><text x="34.2123%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.94%)</title><rect x="33.9623%" y="309" width="0.9434%" height="15" fill="rgb(252,145,46)"/><text x="34.2123%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.94%)</title><rect x="33.9623%" y="293" width="0.9434%" height="15" fill="rgb(237,149,0)"/><text x="34.2123%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.94%)</title><rect x="33.9623%" y="277" width="0.9434%" height="15" fill="rgb(229,65,5)"/><text x="34.2123%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 37.74%)</title><rect x="0.9434%" y="405" width="37.7358%" height="15" fill="rgb(235,60,36)"/><text x="1.1934%" y="415.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop</text></g><g><title>core::ptr::drop_in_place&lt;[openmls::tree::node::Node]&gt; (40 samples, 37.74%)</title><rect x="0.9434%" y="389" width="37.7358%" height="15" fill="rgb(222,47,18)"/><text x="1.1934%" y="399.50">core::ptr::drop_in_place&lt;[openmls::tree::node::Node]&gt;</text></g><g><title>core::ptr::drop_in_place&lt;openmls::tree::node::Node&gt; (40 samples, 37.74%)</title><rect x="0.9434%" y="373" width="37.7358%" height="15" fill="rgb(235,114,22)"/><text x="1.1934%" y="383.50">core::ptr::drop_in_place&lt;openmls::tree::node::Node&gt;</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;openmls::key_packages::KeyPackage&gt;&gt; (40 samples, 37.74%)</title><rect x="0.9434%" y="357" width="37.7358%" height="15" fill="rgb(209,167,11)"/><text x="1.1934%" y="367.50">core::ptr::drop_in_place&lt;core::option::Option&lt;openmls::key_pa..</text></g><g><title>core::ptr::drop_in_place&lt;openmls::key_packages::KeyPackage&gt; (34 samples, 32.08%)</title><rect x="6.6038%" y="341" width="32.0755%" height="15" fill="rgb(251,73,18)"/><text x="6.8538%" y="351.50">core::ptr::drop_in_place&lt;openmls::key_packages::KeyP..</text></g><g><title>core::ptr::drop_in_place&lt;openmls::credentials::Credential&gt; (4 samples, 3.77%)</title><rect x="34.9057%" y="325" width="3.7736%" height="15" fill="rgb(217,60,17)"/><text x="35.1557%" y="335.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;openmls::credentials::MlsCredentialType&gt; (4 samples, 3.77%)</title><rect x="34.9057%" y="309" width="3.7736%" height="15" fill="rgb(224,36,37)"/><text x="35.1557%" y="319.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;openmls::credentials::BasicCredential&gt; (4 samples, 3.77%)</title><rect x="34.9057%" y="293" width="3.7736%" height="15" fill="rgb(211,21,32)"/><text x="35.1557%" y="303.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4 samples, 3.77%)</title><rect x="34.9057%" y="277" width="3.7736%" height="15" fill="rgb(231,55,48)"/><text x="35.1557%" y="287.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4 samples, 3.77%)</title><rect x="34.9057%" y="261" width="3.7736%" height="15" fill="rgb(227,42,18)"/><text x="35.1557%" y="271.50">core..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 3.77%)</title><rect x="34.9057%" y="245" width="3.7736%" height="15" fill="rgb(217,2,27)"/><text x="35.1557%" y="255.50">&lt;all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 3.77%)</title><rect x="34.9057%" y="229" width="3.7736%" height="15" fill="rgb(251,138,23)"/><text x="35.1557%" y="239.50">&lt;all..</text></g><g><title>alloc::alloc::dealloc (4 samples, 3.77%)</title><rect x="34.9057%" y="213" width="3.7736%" height="15" fill="rgb(226,184,11)"/><text x="35.1557%" y="223.50">allo..</text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 3.77%)</title><rect x="34.9057%" y="197" width="3.7736%" height="15" fill="rgb(242,142,12)"/><text x="35.1557%" y="207.50">cfre..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;openmls::tree::RatchetTree&gt;&gt; (61 samples, 57.55%)</title><rect x="0.9434%" y="469" width="57.5472%" height="15" fill="rgb(234,187,18)"/><text x="1.1934%" y="479.50">core::ptr::drop_in_place&lt;core::cell::RefCell&lt;openmls::tree::RatchetTree&gt;&gt;</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;openmls::tree::RatchetTree&gt;&gt; (61 samples, 57.55%)</title><rect x="0.9434%" y="453" width="57.5472%" height="15" fill="rgb(237,44,42)"/><text x="1.1934%" y="463.50">core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;openmls::tree::RatchetTree&gt;&gt;</text></g><g><title>core::ptr::drop_in_place&lt;openmls::tree::RatchetTree&gt; (61 samples, 57.55%)</title><rect x="0.9434%" y="437" width="57.5472%" height="15" fill="rgb(211,90,23)"/><text x="1.1934%" y="447.50">core::ptr::drop_in_place&lt;openmls::tree::RatchetTree&gt;</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;openmls::tree::node::Node&gt;&gt; (61 samples, 57.55%)</title><rect x="0.9434%" y="421" width="57.5472%" height="15" fill="rgb(207,81,18)"/><text x="1.1934%" y="431.50">core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;openmls::tree::node::Node&gt;&gt;</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;openmls::tree::node::Node&gt;&gt; (21 samples, 19.81%)</title><rect x="38.6792%" y="405" width="19.8113%" height="15" fill="rgb(222,107,28)"/><text x="38.9292%" y="415.50">core::ptr::drop_in_place&lt;alloc:..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 19.81%)</title><rect x="38.6792%" y="389" width="19.8113%" height="15" fill="rgb(237,83,52)"/><text x="38.9292%" y="399.50">&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (21 samples, 19.81%)</title><rect x="38.6792%" y="373" width="19.8113%" height="15" fill="rgb(208,67,11)"/><text x="38.9292%" y="383.50">&lt;alloc::alloc::Global as core::..</text></g><g><title>alloc::alloc::dealloc (21 samples, 19.81%)</title><rect x="38.6792%" y="357" width="19.8113%" height="15" fill="rgb(249,157,49)"/><text x="38.9292%" y="367.50">alloc::alloc::dealloc</text></g><g><title>cfree@GLIBC_2.2.5 (21 samples, 19.81%)</title><rect x="38.6792%" y="341" width="19.8113%" height="15" fill="rgb(243,200,1)"/><text x="38.9292%" y="351.50">cfree@GLIBC_2.2.5</text></g><g><title>_int_free (21 samples, 19.81%)</title><rect x="38.6792%" y="325" width="19.8113%" height="15" fill="rgb(225,162,37)"/><text x="38.9292%" y="335.50">_int_free</text></g><g><title>malloc_consolidate (21 samples, 19.81%)</title><rect x="38.6792%" y="309" width="19.8113%" height="15" fill="rgb(242,92,13)"/><text x="38.9292%" y="319.50">malloc_consolidate</text></g><g><title>unlink_chunk.constprop.0 (5 samples, 4.72%)</title><rect x="53.7736%" y="293" width="4.7170%" height="15" fill="rgb(220,43,36)"/><text x="54.0236%" y="303.50">unlin..</text></g><g><title>core::ptr::drop_in_place&lt;(alloc::vec::Vec&lt;openmls::group::mls_group::MlsGroup&gt;,group::Setup,openmls::framing::plaintext::MlsPlaintext,openmls::framing::plaintext::MlsPlaintext)&gt; (70 samples, 66.04%)</title><rect x="0.0000%" y="549" width="66.0377%" height="15" fill="rgb(213,165,48)"/><text x="0.2500%" y="559.50">core::ptr::drop_in_place&lt;(alloc::vec::Vec&lt;openmls::group::mls_group::MlsGroup&gt;,group::Setup,openmls::framing:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;openmls::group::mls_group::MlsGroup&gt;&gt; (70 samples, 66.04%)</title><rect x="0.0000%" y="533" width="66.0377%" height="15" fill="rgb(227,200,9)"/><text x="0.2500%" y="543.50">core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;openmls::group::mls_group::MlsGroup&gt;&gt;</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (70 samples, 66.04%)</title><rect x="0.0000%" y="517" width="66.0377%" height="15" fill="rgb(221,222,28)"/><text x="0.2500%" y="527.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop</text></g><g><title>core::ptr::drop_in_place&lt;[openmls::group::mls_group::MlsGroup]&gt; (70 samples, 66.04%)</title><rect x="0.0000%" y="501" width="66.0377%" height="15" fill="rgb(223,142,26)"/><text x="0.2500%" y="511.50">core::ptr::drop_in_place&lt;[openmls::group::mls_group::MlsGroup]&gt;</text></g><g><title>core::ptr::drop_in_place&lt;openmls::group::mls_group::MlsGroup&gt; (70 samples, 66.04%)</title><rect x="0.0000%" y="485" width="66.0377%" height="15" fill="rgb(243,46,9)"/><text x="0.2500%" y="495.50">core::ptr::drop_in_place&lt;openmls::group::mls_group::MlsGroup&gt;</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;openmls::tree::secret_tree::SecretTree&gt;&gt; (8 samples, 7.55%)</title><rect x="58.4906%" y="469" width="7.5472%" height="15" fill="rgb(250,56,11)"/><text x="58.7406%" y="479.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;openmls::tree::secret_tree::SecretTree&gt;&gt; (8 samples, 7.55%)</title><rect x="58.4906%" y="453" width="7.5472%" height="15" fill="rgb(229,113,5)"/><text x="58.7406%" y="463.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place&lt;openmls::tree::secret_tree::SecretTree&gt; (8 samples, 7.55%)</title><rect x="58.4906%" y="437" width="7.5472%" height="15" fill="rgb(244,108,28)"/><text x="58.7406%" y="447.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;openmls::tree::secret_tree::SecretTreeNode&gt;&gt;&gt; (8 samples, 7.55%)</title><rect x="58.4906%" y="421" width="7.5472%" height="15" fill="rgb(242,119,50)"/><text x="58.7406%" y="431.50">core::ptr:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 7.55%)</title><rect x="58.4906%" y="405" width="7.5472%" height="15" fill="rgb(224,164,23)"/><text x="58.7406%" y="415.50">&lt;alloc::ve..</text></g><g><title>core::ptr::drop_in_place&lt;[core::option::Option&lt;openmls::tree::secret_tree::SecretTreeNode&gt;]&gt; (8 samples, 7.55%)</title><rect x="58.4906%" y="389" width="7.5472%" height="15" fill="rgb(214,227,44)"/><text x="58.7406%" y="399.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;openmls::tree::secret_tree::SecretTreeNode&gt;&gt; (8 samples, 7.55%)</title><rect x="58.4906%" y="373" width="7.5472%" height="15" fill="rgb(238,202,4)"/><text x="58.7406%" y="383.50">core::ptr:..</text></g><g><title>openmls::key_packages::KeyPackage::verify (1 samples, 0.94%)</title><rect x="66.0377%" y="501" width="0.9434%" height="15" fill="rgb(213,190,30)"/><text x="66.2877%" y="511.50"></text></g><g><title>openmls::credentials::Credential::verify (1 samples, 0.94%)</title><rect x="66.0377%" y="485" width="0.9434%" height="15" fill="rgb(239,15,2)"/><text x="66.2877%" y="495.50"></text></g><g><title>openmls::ciphersuite::SignaturePublicKey::verify (1 samples, 0.94%)</title><rect x="66.0377%" y="469" width="0.9434%" height="15" fill="rgb(249,229,4)"/><text x="66.2877%" y="479.50"></text></g><g><title>evercrypt::signature::verify (1 samples, 0.94%)</title><rect x="66.0377%" y="453" width="0.9434%" height="15" fill="rgb(239,75,44)"/><text x="66.2877%" y="463.50"></text></g><g><title>evercrypt::ed25519::eddsa_verify (1 samples, 0.94%)</title><rect x="66.0377%" y="437" width="0.9434%" height="15" fill="rgb(251,206,23)"/><text x="66.2877%" y="447.50"></text></g><g><title>Hacl_Ed25519_verify (1 samples, 0.94%)</title><rect x="66.0377%" y="421" width="0.9434%" height="15" fill="rgb(215,208,0)"/><text x="66.2877%" y="431.50"></text></g><g><title>Hacl_Impl_Ed25519_Ladder_point_mul (1 samples, 0.94%)</title><rect x="66.0377%" y="405" width="0.9434%" height="15" fill="rgb(230,75,50)"/><text x="66.2877%" y="415.50"></text></g><g><title>point_double (1 samples, 0.94%)</title><rect x="66.0377%" y="389" width="0.9434%" height="15" fill="rgb(246,180,39)"/><text x="66.2877%" y="399.50"></text></g><g><title>openmls::group::mls_group::MlsGroup::apply_commit (2 samples, 1.89%)</title><rect x="66.0377%" y="533" width="1.8868%" height="15" fill="rgb(249,175,24)"/><text x="66.2877%" y="543.50">o..</text></g><g><title>openmls::group::mls_group::apply_commit::&lt;impl openmls::group::mls_group::MlsGroup&gt;::apply_commit_internal (2 samples, 1.89%)</title><rect x="66.0377%" y="517" width="1.8868%" height="15" fill="rgb(247,176,22)"/><text x="66.2877%" y="527.50">o..</text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash (1 samples, 0.94%)</title><rect x="66.9811%" y="501" width="0.9434%" height="15" fill="rgb(241,100,24)"/><text x="67.2311%" y="511.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.94%)</title><rect x="66.9811%" y="485" width="0.9434%" height="15" fill="rgb(233,4,35)"/><text x="67.2311%" y="495.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.94%)</title><rect x="66.9811%" y="469" width="0.9434%" height="15" fill="rgb(211,164,46)"/><text x="67.2311%" y="479.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.94%)</title><rect x="66.9811%" y="453" width="0.9434%" height="15" fill="rgb(242,99,53)"/><text x="67.2311%" y="463.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.94%)</title><rect x="66.9811%" y="437" width="0.9434%" height="15" fill="rgb(243,45,33)"/><text x="67.2311%" y="447.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.94%)</title><rect x="66.9811%" y="421" width="0.9434%" height="15" fill="rgb(217,55,21)"/><text x="67.2311%" y="431.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.94%)</title><rect x="66.9811%" y="405" width="0.9434%" height="15" fill="rgb(245,145,46)"/><text x="67.2311%" y="415.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.94%)</title><rect x="66.9811%" y="389" width="0.9434%" height="15" fill="rgb(215,112,45)"/><text x="67.2311%" y="399.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.94%)</title><rect x="66.9811%" y="373" width="0.9434%" height="15" fill="rgb(228,104,16)"/><text x="67.2311%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.94%)</title><rect x="66.9811%" y="357" width="0.9434%" height="15" fill="rgb(239,186,38)"/><text x="67.2311%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.94%)</title><rect x="66.9811%" y="341" width="0.9434%" height="15" fill="rgb(228,38,35)"/><text x="67.2311%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.94%)</title><rect x="66.9811%" y="325" width="0.9434%" height="15" fill="rgb(251,42,40)"/><text x="67.2311%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.94%)</title><rect x="66.9811%" y="309" width="0.9434%" height="15" fill="rgb(210,51,19)"/><text x="67.2311%" y="319.50"></text></g><g><title>hpke_rs::Hpke::key_schedule_context (1 samples, 0.94%)</title><rect x="67.9245%" y="213" width="0.9434%" height="15" fill="rgb(236,94,42)"/><text x="68.1745%" y="223.50"></text></g><g><title>hpke_rs::kdf::Kdf::labeled_extract (1 samples, 0.94%)</title><rect x="67.9245%" y="197" width="0.9434%" height="15" fill="rgb(239,167,16)"/><text x="68.1745%" y="207.50"></text></g><g><title>&lt;hpke_rs::hkdf::HkdfSha256 as hpke_rs::kdf::KdfTrait&gt;::extract (1 samples, 0.94%)</title><rect x="67.9245%" y="181" width="0.9434%" height="15" fill="rgb(252,175,31)"/><text x="68.1745%" y="191.50"></text></g><g><title>evercrypt::hkdf::extract (1 samples, 0.94%)</title><rect x="67.9245%" y="165" width="0.9434%" height="15" fill="rgb(206,166,30)"/><text x="68.1745%" y="175.50"></text></g><g><title>EverCrypt_HMAC_compute_sha2_256 (1 samples, 0.94%)</title><rect x="67.9245%" y="149" width="0.9434%" height="15" fill="rgb(206,209,37)"/><text x="68.1745%" y="159.50"></text></g><g><title>Hacl_Hash_SHA2_update_multi_256 (1 samples, 0.94%)</title><rect x="67.9245%" y="133" width="0.9434%" height="15" fill="rgb(226,91,4)"/><text x="68.1745%" y="143.50"></text></g><g><title>Hacl_Hash_Core_SHA2_update_224 (1 samples, 0.94%)</title><rect x="67.9245%" y="117" width="0.9434%" height="15" fill="rgb(222,167,0)"/><text x="68.1745%" y="127.50"></text></g><g><title>hpke_rs::kdf::Kdf::labeled_expand (1 samples, 0.94%)</title><rect x="68.8679%" y="213" width="0.9434%" height="15" fill="rgb(211,70,14)"/><text x="69.1179%" y="223.50"></text></g><g><title>&lt;hpke_rs::hkdf::HkdfSha256 as hpke_rs::kdf::KdfTrait&gt;::expand (1 samples, 0.94%)</title><rect x="68.8679%" y="197" width="0.9434%" height="15" fill="rgb(214,84,42)"/><text x="69.1179%" y="207.50"></text></g><g><title>evercrypt::hkdf::expand (1 samples, 0.94%)</title><rect x="68.8679%" y="181" width="0.9434%" height="15" fill="rgb(235,157,37)"/><text x="69.1179%" y="191.50"></text></g><g><title>EverCrypt_HKDF_expand_sha2_256 (1 samples, 0.94%)</title><rect x="68.8679%" y="165" width="0.9434%" height="15" fill="rgb(225,13,6)"/><text x="69.1179%" y="175.50"></text></g><g><title>EverCrypt_HMAC_compute_sha2_256 (1 samples, 0.94%)</title><rect x="68.8679%" y="149" width="0.9434%" height="15" fill="rgb(205,202,1)"/><text x="69.1179%" y="159.50"></text></g><g><title>EverCrypt_Hash_update_last_256 (1 samples, 0.94%)</title><rect x="68.8679%" y="133" width="0.9434%" height="15" fill="rgb(232,195,26)"/><text x="69.1179%" y="143.50"></text></g><g><title>Hacl_Hash_SHA2_update_multi_256 (1 samples, 0.94%)</title><rect x="68.8679%" y="117" width="0.9434%" height="15" fill="rgb(208,102,26)"/><text x="69.1179%" y="127.50"></text></g><g><title>Hacl_Hash_Core_SHA2_update_224 (1 samples, 0.94%)</title><rect x="68.8679%" y="101" width="0.9434%" height="15" fill="rgb(215,41,39)"/><text x="69.1179%" y="111.50"></text></g><g><title>hpke_rs::Hpke::key_schedule (4 samples, 3.77%)</title><rect x="67.9245%" y="229" width="3.7736%" height="15" fill="rgb(247,139,11)"/><text x="68.1745%" y="239.50">hpke..</text></g><g><title>hpke_rs::kdf::Kdf::labeled_extract (2 samples, 1.89%)</title><rect x="69.8113%" y="213" width="1.8868%" height="15" fill="rgb(243,99,6)"/><text x="70.0613%" y="223.50">h..</text></g><g><title>&lt;hpke_rs::hkdf::HkdfSha256 as hpke_rs::kdf::KdfTrait&gt;::extract (2 samples, 1.89%)</title><rect x="69.8113%" y="197" width="1.8868%" height="15" fill="rgb(230,168,48)"/><text x="70.0613%" y="207.50">&lt;..</text></g><g><title>evercrypt::hkdf::extract (2 samples, 1.89%)</title><rect x="69.8113%" y="181" width="1.8868%" height="15" fill="rgb(238,227,13)"/><text x="70.0613%" y="191.50">e..</text></g><g><title>EverCrypt_HMAC_compute_sha2_256 (2 samples, 1.89%)</title><rect x="69.8113%" y="165" width="1.8868%" height="15" fill="rgb(209,109,13)"/><text x="70.0613%" y="175.50">E..</text></g><g><title>EverCrypt_Hash_update_last_256 (2 samples, 1.89%)</title><rect x="69.8113%" y="149" width="1.8868%" height="15" fill="rgb(228,195,1)"/><text x="70.0613%" y="159.50">E..</text></g><g><title>Hacl_Hash_SHA2_update_multi_256 (2 samples, 1.89%)</title><rect x="69.8113%" y="133" width="1.8868%" height="15" fill="rgb(230,218,0)"/><text x="70.0613%" y="143.50">H..</text></g><g><title>Hacl_Hash_Core_SHA2_update_224 (2 samples, 1.89%)</title><rect x="69.8113%" y="117" width="1.8868%" height="15" fill="rgb(206,1,45)"/><text x="70.0613%" y="127.50">H..</text></g><g><title>encode_point (2 samples, 1.89%)</title><rect x="71.6981%" y="101" width="1.8868%" height="15" fill="rgb(209,124,26)"/><text x="71.9481%" y="111.50">e..</text></g><g><title>Hacl_Curve25519_51_finv (2 samples, 1.89%)</title><rect x="71.6981%" y="85" width="1.8868%" height="15" fill="rgb(220,59,8)"/><text x="71.9481%" y="95.50">H..</text></g><g><title>Hacl_Curve25519_51_fsquare_times (2 samples, 1.89%)</title><rect x="71.6981%" y="69" width="1.8868%" height="15" fill="rgb(251,41,37)"/><text x="71.9481%" y="79.50">H..</text></g><g><title>Hacl_Impl_Curve25519_Field51_fsqr (2 samples, 1.89%)</title><rect x="71.6981%" y="53" width="1.8868%" height="15" fill="rgb(239,152,21)"/><text x="71.9481%" y="63.50">H..</text></g><g><title>FStar_UInt128_add (2 samples, 1.89%)</title><rect x="71.6981%" y="37" width="1.8868%" height="15" fill="rgb(226,32,1)"/><text x="71.9481%" y="47.50">F..</text></g><g><title>hpke_rs::dh_kem::DhKem::dh_base (13 samples, 12.26%)</title><rect x="71.6981%" y="181" width="12.2642%" height="15" fill="rgb(230,154,36)"/><text x="71.9481%" y="191.50">hpke_rs::dh_kem::D..</text></g><g><title>evercrypt::ecdh::derive_base (13 samples, 12.26%)</title><rect x="71.6981%" y="165" width="12.2642%" height="15" fill="rgb(208,228,43)"/><text x="71.9481%" y="175.50">evercrypt::ecdh::d..</text></g><g><title>evercrypt::x25519::dh_base (13 samples, 12.26%)</title><rect x="71.6981%" y="149" width="12.2642%" height="15" fill="rgb(214,203,3)"/><text x="71.9481%" y="159.50">evercrypt::x25519:..</text></g><g><title>Hacl_Curve25519_51_secret_to_public (13 samples, 12.26%)</title><rect x="71.6981%" y="133" width="12.2642%" height="15" fill="rgb(207,149,29)"/><text x="71.9481%" y="143.50">Hacl_Curve25519_51..</text></g><g><title>Hacl_Curve25519_51_scalarmult (13 samples, 12.26%)</title><rect x="71.6981%" y="117" width="12.2642%" height="15" fill="rgb(250,105,7)"/><text x="71.9481%" y="127.50">Hacl_Curve25519_51..</text></g><g><title>montgomery_ladder (11 samples, 10.38%)</title><rect x="73.5849%" y="101" width="10.3774%" height="15" fill="rgb(232,222,16)"/><text x="73.8349%" y="111.50">montgomery_ladd..</text></g><g><title>point_add_and_double (11 samples, 10.38%)</title><rect x="73.5849%" y="85" width="10.3774%" height="15" fill="rgb(209,32,24)"/><text x="73.8349%" y="95.50">point_add_and_d..</text></g><g><title>fsqr20 (11 samples, 10.38%)</title><rect x="73.5849%" y="69" width="10.3774%" height="15" fill="rgb(225,13,6)"/><text x="73.8349%" y="79.50">fsqr20</text></g><g><title>FStar_UInt128_mul_wide (11 samples, 10.38%)</title><rect x="73.5849%" y="53" width="10.3774%" height="15" fill="rgb(245,226,26)"/><text x="73.8349%" y="63.50">FStar_UInt128_m..</text></g><g><title>&lt;hpke_rs::dh_kem::DhKem as hpke_rs::kem::KemTrait&gt;::derive_key_pair (14 samples, 13.21%)</title><rect x="71.6981%" y="197" width="13.2075%" height="15" fill="rgb(229,178,27)"/><text x="71.9481%" y="207.50">&lt;hpke_rs::dh_kem::Dh..</text></g><g><title>hpke_rs::kdf::Kdf::labeled_extract (1 samples, 0.94%)</title><rect x="83.9623%" y="181" width="0.9434%" height="15" fill="rgb(205,227,28)"/><text x="84.2123%" y="191.50"></text></g><g><title>&lt;hpke_rs::hkdf::HkdfSha256 as hpke_rs::kdf::KdfTrait&gt;::extract (1 samples, 0.94%)</title><rect x="83.9623%" y="165" width="0.9434%" height="15" fill="rgb(210,191,45)"/><text x="84.2123%" y="175.50"></text></g><g><title>evercrypt::hkdf::extract (1 samples, 0.94%)</title><rect x="83.9623%" y="149" width="0.9434%" height="15" fill="rgb(206,124,16)"/><text x="84.2123%" y="159.50"></text></g><g><title>EverCrypt_HMAC_compute_sha2_256 (1 samples, 0.94%)</title><rect x="83.9623%" y="133" width="0.9434%" height="15" fill="rgb(210,162,0)"/><text x="84.2123%" y="143.50"></text></g><g><title>EverCrypt_Hash_update_last_256 (1 samples, 0.94%)</title><rect x="83.9623%" y="117" width="0.9434%" height="15" fill="rgb(211,54,38)"/><text x="84.2123%" y="127.50"></text></g><g><title>Hacl_Hash_SHA2_update_multi_256 (1 samples, 0.94%)</title><rect x="83.9623%" y="101" width="0.9434%" height="15" fill="rgb(248,192,3)"/><text x="84.2123%" y="111.50"></text></g><g><title>Hacl_Hash_Core_SHA2_update_224 (1 samples, 0.94%)</title><rect x="83.9623%" y="85" width="0.9434%" height="15" fill="rgb(233,187,18)"/><text x="84.2123%" y="95.50"></text></g><g><title>encode_point (2 samples, 1.89%)</title><rect x="84.9057%" y="117" width="1.8868%" height="15" fill="rgb(237,208,14)"/><text x="85.1557%" y="127.50">e..</text></g><g><title>Hacl_Curve25519_51_finv (2 samples, 1.89%)</title><rect x="84.9057%" y="101" width="1.8868%" height="15" fill="rgb(212,77,1)"/><text x="85.1557%" y="111.50">H..</text></g><g><title>Hacl_Curve25519_51_fsquare_times (2 samples, 1.89%)</title><rect x="84.9057%" y="85" width="1.8868%" height="15" fill="rgb(210,163,22)"/><text x="85.1557%" y="95.50">H..</text></g><g><title>Hacl_Impl_Curve25519_Field51_fsqr (2 samples, 1.89%)</title><rect x="84.9057%" y="69" width="1.8868%" height="15" fill="rgb(250,58,28)"/><text x="85.1557%" y="79.50">H..</text></g><g><title>FStar_UInt128_add (2 samples, 1.89%)</title><rect x="84.9057%" y="53" width="1.8868%" height="15" fill="rgb(254,28,41)"/><text x="85.1557%" y="63.50">F..</text></g><g><title>hpke_rs::dh_kem::DhKem::dh (13 samples, 12.26%)</title><rect x="84.9057%" y="197" width="12.2642%" height="15" fill="rgb(237,162,36)"/><text x="85.1557%" y="207.50">hpke_rs::dh_kem::D..</text></g><g><title>evercrypt::ecdh::derive (13 samples, 12.26%)</title><rect x="84.9057%" y="181" width="12.2642%" height="15" fill="rgb(232,56,6)"/><text x="85.1557%" y="191.50">evercrypt::ecdh::d..</text></g><g><title>evercrypt::x25519::dh (13 samples, 12.26%)</title><rect x="84.9057%" y="165" width="12.2642%" height="15" fill="rgb(216,127,42)"/><text x="85.1557%" y="175.50">evercrypt::x25519:..</text></g><g><title>Hacl_Curve25519_51_ecdh (13 samples, 12.26%)</title><rect x="84.9057%" y="149" width="12.2642%" height="15" fill="rgb(241,69,15)"/><text x="85.1557%" y="159.50">Hacl_Curve25519_51..</text></g><g><title>Hacl_Curve25519_51_scalarmult (13 samples, 12.26%)</title><rect x="84.9057%" y="133" width="12.2642%" height="15" fill="rgb(227,180,19)"/><text x="85.1557%" y="143.50">Hacl_Curve25519_51..</text></g><g><title>montgomery_ladder (11 samples, 10.38%)</title><rect x="86.7925%" y="117" width="10.3774%" height="15" fill="rgb(231,188,29)"/><text x="87.0425%" y="127.50">montgomery_ladd..</text></g><g><title>point_add_and_double (11 samples, 10.38%)</title><rect x="86.7925%" y="101" width="10.3774%" height="15" fill="rgb(224,176,27)"/><text x="87.0425%" y="111.50">point_add_and_d..</text></g><g><title>fmul20 (11 samples, 10.38%)</title><rect x="86.7925%" y="85" width="10.3774%" height="15" fill="rgb(249,214,19)"/><text x="87.0425%" y="95.50">fmul20</text></g><g><title>hpke_rs::dh_kem::DhKem::extract_and_expand (1 samples, 0.94%)</title><rect x="97.1698%" y="197" width="0.9434%" height="15" fill="rgb(240,0,4)"/><text x="97.4198%" y="207.50"></text></g><g><title>hpke_rs::kdf::Kdf::labeled_expand (1 samples, 0.94%)</title><rect x="97.1698%" y="181" width="0.9434%" height="15" fill="rgb(233,28,41)"/><text x="97.4198%" y="191.50"></text></g><g><title>&lt;hpke_rs::hkdf::HkdfSha256 as hpke_rs::kdf::KdfTrait&gt;::expand (1 samples, 0.94%)</title><rect x="97.1698%" y="165" width="0.9434%" height="15" fill="rgb(220,90,51)"/><text x="97.4198%" y="175.50"></text></g><g><title>evercrypt::hkdf::expand (1 samples, 0.94%)</title><rect x="97.1698%" y="149" width="0.9434%" height="15" fill="rgb(250,52,22)"/><text x="97.4198%" y="159.50"></text></g><g><title>EverCrypt_HKDF_expand_sha2_256 (1 samples, 0.94%)</title><rect x="97.1698%" y="133" width="0.9434%" height="15" fill="rgb(231,152,36)"/><text x="97.4198%" y="143.50"></text></g><g><title>EverCrypt_HMAC_compute_sha2_256 (1 samples, 0.94%)</title><rect x="97.1698%" y="117" width="0.9434%" height="15" fill="rgb(250,218,4)"/><text x="97.4198%" y="127.50"></text></g><g><title>EverCrypt_Hash_update_last_256 (1 samples, 0.94%)</title><rect x="97.1698%" y="101" width="0.9434%" height="15" fill="rgb(210,38,21)"/><text x="97.4198%" y="111.50"></text></g><g><title>Hacl_Hash_SHA2_update_multi_256 (1 samples, 0.94%)</title><rect x="97.1698%" y="85" width="0.9434%" height="15" fill="rgb(230,75,13)"/><text x="97.4198%" y="95.50"></text></g><g><title>Hacl_Hash_Core_SHA2_update_224 (1 samples, 0.94%)</title><rect x="97.1698%" y="69" width="0.9434%" height="15" fill="rgb(250,68,53)"/><text x="97.4198%" y="79.50"></text></g><g><title>openmls::tree::RatchetTree::refresh_private_tree (33 samples, 31.13%)</title><rect x="67.9245%" y="501" width="31.1321%" height="15" fill="rgb(250,210,16)"/><text x="68.1745%" y="511.50">openmls::tree::RatchetTree::refresh_private_tree</text></g><g><title>openmls::tree::RatchetTree::replace_private_tree_ (33 samples, 31.13%)</title><rect x="67.9245%" y="485" width="31.1321%" height="15" fill="rgb(240,132,5)"/><text x="68.1745%" y="495.50">openmls::tree::RatchetTree::replace_private_tree_</text></g><g><title>openmls::tree::RatchetTree::encrypt_to_copath (33 samples, 31.13%)</title><rect x="67.9245%" y="469" width="31.1321%" height="15" fill="rgb(222,148,48)"/><text x="68.1745%" y="479.50">openmls::tree::RatchetTree::encrypt_to_copath</text></g><g><title>core::iter::traits::iterator::Iterator::collect (33 samples, 31.13%)</title><rect x="67.9245%" y="453" width="31.1321%" height="15" fill="rgb(247,181,24)"/><text x="68.1745%" y="463.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (33 samples, 31.13%)</title><rect x="67.9245%" y="437" width="31.1321%" height="15" fill="rgb(239,5,31)"/><text x="68.1745%" y="447.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (33 samples, 31.13%)</title><rect x="67.9245%" y="421" width="31.1321%" height="15" fill="rgb(241,152,38)"/><text x="68.1745%" y="431.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (33 samples, 31.13%)</title><rect x="67.9245%" y="405" width="31.1321%" height="15" fill="rgb(246,200,37)"/><text x="68.1745%" y="415.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (33 samples, 31.13%)</title><rect x="67.9245%" y="389" width="31.1321%" height="15" fill="rgb(243,210,26)"/><text x="68.1745%" y="399.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (33 samples, 31.13%)</title><rect x="67.9245%" y="373" width="31.1321%" height="15" fill="rgb(222,22,22)"/><text x="68.1745%" y="383.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (33 samples, 31.13%)</title><rect x="67.9245%" y="357" width="31.1321%" height="15" fill="rgb(208,129,28)"/><text x="68.1745%" y="367.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (33 samples, 31.13%)</title><rect x="67.9245%" y="341" width="31.1321%" height="15" fill="rgb(254,169,28)"/><text x="68.1745%" y="351.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (33 samples, 31.13%)</title><rect x="67.9245%" y="325" width="31.1321%" height="15" fill="rgb(225,45,17)"/><text x="68.1745%" y="335.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>openmls::tree::RatchetTree::encrypt_to_copath::{{closure}} (33 samples, 31.13%)</title><rect x="67.9245%" y="309" width="31.1321%" height="15" fill="rgb(232,199,2)"/><text x="68.1745%" y="319.50">openmls::tree::RatchetTree::encrypt_to_copath::{{c..</text></g><g><title>openmls::ciphersuite::Ciphersuite::hpke_seal_secret (33 samples, 31.13%)</title><rect x="67.9245%" y="293" width="31.1321%" height="15" fill="rgb(235,33,40)"/><text x="68.1745%" y="303.50">openmls::ciphersuite::Ciphersuite::hpke_seal_secret</text></g><g><title>openmls::ciphersuite::Ciphersuite::hpke_seal (33 samples, 31.13%)</title><rect x="67.9245%" y="277" width="31.1321%" height="15" fill="rgb(237,89,50)"/><text x="68.1745%" y="287.50">openmls::ciphersuite::Ciphersuite::hpke_seal</text></g><g><title>hpke_rs::Hpke::seal (33 samples, 31.13%)</title><rect x="67.9245%" y="261" width="31.1321%" height="15" fill="rgb(238,126,5)"/><text x="68.1745%" y="271.50">hpke_rs::Hpke::seal</text></g><g><title>hpke_rs::Hpke::setup_sender (33 samples, 31.13%)</title><rect x="67.9245%" y="245" width="31.1321%" height="15" fill="rgb(247,214,42)"/><text x="68.1745%" y="255.50">hpke_rs::Hpke::setup_sender</text></g><g><title>hpke_rs::kem::Kem::encaps (29 samples, 27.36%)</title><rect x="71.6981%" y="229" width="27.3585%" height="15" fill="rgb(238,60,45)"/><text x="71.9481%" y="239.50">hpke_rs::kem::Kem::encaps</text></g><g><title>&lt;hpke_rs::dh_kem::DhKem as hpke_rs::kem::KemTrait&gt;::encaps (29 samples, 27.36%)</title><rect x="71.6981%" y="213" width="27.3585%" height="15" fill="rgb(225,69,44)"/><text x="71.9481%" y="223.50">&lt;hpke_rs::dh_kem::DhKem as hpke_rs::kem::Kem..</text></g><g><title>hpke_rs::dh_kem::DhKem::random (1 samples, 0.94%)</title><rect x="98.1132%" y="197" width="0.9434%" height="15" fill="rgb(241,13,44)"/><text x="98.3632%" y="207.50"></text></g><g><title>hpke_rs::util::random (1 samples, 0.94%)</title><rect x="98.1132%" y="181" width="0.9434%" height="15" fill="rgb(227,121,22)"/><text x="98.3632%" y="191.50"></text></g><g><title>evercrypt::rand_util::get_random_vec (1 samples, 0.94%)</title><rect x="98.1132%" y="165" width="0.9434%" height="15" fill="rgb(231,160,23)"/><text x="98.3632%" y="175.50"></text></g><g><title>&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::fill_bytes (1 samples, 0.94%)</title><rect x="98.1132%" y="149" width="0.9434%" height="15" fill="rgb(250,179,43)"/><text x="98.3632%" y="159.50"></text></g><g><title>&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (1 samples, 0.94%)</title><rect x="98.1132%" y="133" width="0.9434%" height="15" fill="rgb(233,54,46)"/><text x="98.3632%" y="143.50"></text></g><g><title>getrandom::imp::getrandom_inner (1 samples, 0.94%)</title><rect x="98.1132%" y="117" width="0.9434%" height="15" fill="rgb(247,120,42)"/><text x="98.3632%" y="127.50"></text></g><g><title>getrandom::util_libc::sys_fill_exact (1 samples, 0.94%)</title><rect x="98.1132%" y="101" width="0.9434%" height="15" fill="rgb(221,219,12)"/><text x="98.3632%" y="111.50"></text></g><g><title>getrandom::imp::getrandom_inner::{{closure}} (1 samples, 0.94%)</title><rect x="98.1132%" y="85" width="0.9434%" height="15" fill="rgb(211,126,8)"/><text x="98.3632%" y="95.50"></text></g><g><title>getrandom::imp::getrandom (1 samples, 0.94%)</title><rect x="98.1132%" y="69" width="0.9434%" height="15" fill="rgb(218,154,33)"/><text x="98.3632%" y="79.50"></text></g><g><title>syscall (1 samples, 0.94%)</title><rect x="98.1132%" y="53" width="0.9434%" height="15" fill="rgb(212,199,16)"/><text x="98.3632%" y="63.50"></text></g><g><title>all (106 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(236,215,46)"/><text x="0.2500%" y="831.50"></text></g><g><title>group-f2b402fe5 (106 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(232,32,22)"/><text x="0.2500%" y="815.50">group-f2b402fe5</text></g><g><title>_start (106 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(234,79,15)"/><text x="0.2500%" y="799.50">_start</text></g><g><title>__libc_start_main (106 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(235,187,47)"/><text x="0.2500%" y="783.50">__libc_start_main</text></g><g><title>main (106 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(244,69,37)"/><text x="0.2500%" y="767.50">main</text></g><g><title>std::rt::lang_start_internal (106 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(249,140,25)"/><text x="0.2500%" y="751.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (106 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(213,69,8)"/><text x="0.2500%" y="735.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (106 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(220,136,2)"/><text x="0.2500%" y="719.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (106 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(237,50,36)"/><text x="0.2500%" y="703.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (106 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(226,18,11)"/><text x="0.2500%" y="687.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (106 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(243,156,2)"/><text x="0.2500%" y="671.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (106 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(218,8,34)"/><text x="0.2500%" y="655.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (106 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(250,94,35)"/><text x="0.2500%" y="639.50">core::ops::function::FnOnce::call_once</text></g><g><title>group::main (106 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(229,127,21)"/><text x="0.2500%" y="623.50">group::main</text></g><g><title>group::bench_main (106 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(234,49,5)"/><text x="0.2500%" y="607.50">group::bench_main</text></g><g><title>group::time (106 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(248,12,16)"/><text x="0.2500%" y="591.50">group::time</text></g><g><title>group::bench_main::{{closure}} (106 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(208,220,31)"/><text x="0.2500%" y="575.50">group::bench_main::{{closure}}</text></g><g><title>group::send_update (36 samples, 33.96%)</title><rect x="66.0377%" y="549" width="33.9623%" height="15" fill="rgb(243,184,0)"/><text x="66.2877%" y="559.50">group::send_update</text></g><g><title>openmls::group::mls_group::MlsGroup::create_commit (34 samples, 32.08%)</title><rect x="67.9245%" y="533" width="32.0755%" height="15" fill="rgb(217,38,21)"/><text x="68.1745%" y="543.50">openmls::group::mls_group::MlsGroup::create_commit</text></g><g><title>openmls::group::mls_group::create_commit::&lt;impl openmls::group::mls_group::MlsGroup&gt;::create_commit_internal (34 samples, 32.08%)</title><rect x="67.9245%" y="517" width="32.0755%" height="15" fill="rgb(239,120,45)"/><text x="68.1745%" y="527.50">openmls::group::mls_group::create_commit::&lt;impl open..</text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash (1 samples, 0.94%)</title><rect x="99.0566%" y="501" width="0.9434%" height="15" fill="rgb(235,33,2)"/><text x="99.3066%" y="511.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.94%)</title><rect x="99.0566%" y="485" width="0.9434%" height="15" fill="rgb(249,161,5)"/><text x="99.3066%" y="495.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.94%)</title><rect x="99.0566%" y="469" width="0.9434%" height="15" fill="rgb(250,165,48)"/><text x="99.3066%" y="479.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.94%)</title><rect x="99.0566%" y="453" width="0.9434%" height="15" fill="rgb(221,23,45)"/><text x="99.3066%" y="463.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.94%)</title><rect x="99.0566%" y="437" width="0.9434%" height="15" fill="rgb(217,108,46)"/><text x="99.3066%" y="447.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.94%)</title><rect x="99.0566%" y="421" width="0.9434%" height="15" fill="rgb(254,26,35)"/><text x="99.3066%" y="431.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.94%)</title><rect x="99.0566%" y="405" width="0.9434%" height="15" fill="rgb(218,223,28)"/><text x="99.3066%" y="415.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.94%)</title><rect x="99.0566%" y="389" width="0.9434%" height="15" fill="rgb(242,27,47)"/><text x="99.3066%" y="399.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.94%)</title><rect x="99.0566%" y="373" width="0.9434%" height="15" fill="rgb(218,39,35)"/><text x="99.3066%" y="383.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.94%)</title><rect x="99.0566%" y="357" width="0.9434%" height="15" fill="rgb(232,127,16)"/><text x="99.3066%" y="367.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.94%)</title><rect x="99.0566%" y="341" width="0.9434%" height="15" fill="rgb(231,219,51)"/><text x="99.3066%" y="351.50"></text></g><g><title>openmls::tree::hashes::&lt;impl openmls::tree::RatchetTree&gt;::tree_hash::node_hash (1 samples, 0.94%)</title><rect x="99.0566%" y="325" width="0.9434%" height="15" fill="rgb(217,220,46)"/><text x="99.3066%" y="335.50"></text></g><g><title>openmls::tree::hashes::LeafNodeHashInput::hash (1 samples, 0.94%)</title><rect x="99.0566%" y="309" width="0.9434%" height="15" fill="rgb(230,75,1)"/><text x="99.3066%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.94%)</title><rect x="99.0566%" y="293" width="0.9434%" height="15" fill="rgb(218,2,8)"/><text x="99.3066%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.94%)</title><rect x="99.0566%" y="277" width="0.9434%" height="15" fill="rgb(206,111,30)"/><text x="99.3066%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.94%)</title><rect x="99.0566%" y="261" width="0.9434%" height="15" fill="rgb(209,135,6)"/><text x="99.3066%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.94%)</title><rect x="99.0566%" y="245" width="0.9434%" height="15" fill="rgb(205,169,10)"/><text x="99.3066%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.94%)</title><rect x="99.0566%" y="229" width="0.9434%" height="15" fill="rgb(212,204,38)"/><text x="99.3066%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.94%)</title><rect x="99.0566%" y="213" width="0.9434%" height="15" fill="rgb(205,199,14)"/><text x="99.3066%" y="223.50"></text></g></svg></svg>