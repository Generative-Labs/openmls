initSidebarItems({"constant":[["AES_128_KEY_BYTES",""],["AES_256_KEY_BYTES",""],["CHACHA_KEY_BYTES",""],["NONCE_BYTES",""],["REUSE_GUARD_BYTES",""],["TAG_BYTES",""]],"enum":[["AEADError",""],["ApplyCommitError",""],["CiphersuiteName",""],["CodecError",""],["ContentType",""],["CredentialError",""],["CredentialType","Enum for Credential Types. We only need this for encoding/decoding."],["DecryptionError",""],["ExtensionError",""],["ExtensionType","Extension types"],["HKDFError",""],["KeyPackageError",""],["MLSCiphertextError",""],["MLSCredentialType","This enum contains the different available credentials."],["MLSPlaintextContentType",""],["MLSPlaintextError",""],["ProtocolVersion","Protocol Version"],["VecSize",""],["WelcomeError",""]],"fn":[["_print_tree",""],["decode_vec",""],["encode_vec",""]],"mod":[["sender","Section  9. Message Framing"]],"struct":[["AeadKey",""],["AeadNonce",""],["BasicCredential",""],["CapabilitiesExtension",""],["Certificate","Struct containing an X509 certificate chain, as per Spec."],["Ciphersuite",""],["Config","OpenMLS Configuration"],["Credential","Struct containing MLS credential data, where the data depends on the type."],["CredentialBundle","This struct contains a credential and the corresponding private key."],["Cursor",""],["ExtensionStruct","Extension struct"],["GroupConfig","Configuration for an MLS group."],["GroupId",""],["HpkeCiphertext","7.7. Update Paths"],["KeyIDExtension",""],["KeyPackage",""],["KeyPackageBundle",""],["LeafIndex",""],["LifetimeExtension","The lifetime extension holds a not before and a not after time measured in seconds since the Unix epoch (1970-01-01T00:00:00Z)."],["MLSCiphertext",""],["MLSCiphertextContent",""],["MLSCiphertextContentAAD",""],["MLSPlaintext",""],["MLSPlaintextCommitAuthData",""],["MLSPlaintextCommitContent",""],["MLSPlaintextTBS",""],["MLSSenderData",""],["ManagedGroup","A `ManagedGroup` represents an `MLSGroup` with an easier, high-level API designed to be used in production. The API exposes high level functions to manage a group by adding/removing members, get the current member list, etc."],["ManagedGroupCallbacks","Collection of callback functions that are passed to a `ManagedGroup` as part of the configurations Callback functions are optional. If no validator function is specified for a certain proposal type, any semantically valid proposal will be accepted. Validator fucntions returan a `bool`, depending on whether the proposal is accepted by the application policy.  - `true` means the proposal should be accepted  - `false` means the proposal should be rejected"],["ManagedGroupConfig","Specifies the configuration parameters for a managed group"],["MlsGroup",""],["ReuseGuard",""],["Secret","A struct to contain secrets. This is to provide better visibility into where and how secrets are used and to avoid passing secrets in their raw representation."],["Signature",""],["SignatureKeypair",""],["SignaturePrivateKey",""],["SignaturePublicKey",""],["Welcome",""]],"trait":[["Api",""],["Codec",""],["Extension","Extension"],["ExtensionHelper",""]]});