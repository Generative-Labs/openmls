initSidebarItems({"enum":[["ApplyCommitError",""],["CiphersuiteName",""],["CodecError",""],["CredentialError",""],["CredentialType","Enum for Credential Types. We only need this for encoding/decoding."],["GroupError",""],["MLSCredentialType","This enum contains the different available credentials."],["VecSize",""],["WelcomeError",""]],"fn":[["_print_tree",""],["decode_vec",""],["encode_vec",""]],"struct":[["AeadKey",""],["AeadNonce",""],["BasicCredential",""],["Certificate","Struct containing an X509 certificate chain, as per Spec."],["Ciphersuite",""],["Credential","Struct containing MLS credential data, where the data depends on the type."],["CredentialBundle","This struct contains a credential and the corresponding private key."],["Cursor",""],["GroupConfig","Configuration for an MLS group."],["GroupId",""],["HpkeCiphertext","7.7. Update Paths"],["LeafIndex",""],["ManagedGroup","A `ManagedGroup` represents an `MLSGroup` with an easier, high-level API designed to be used in production. The API exposes high level functions to manage a group by adding/removing members, get the current member list, etc."],["ManagedGroupCallbacks","Collection of callback functions that are passed to a `ManagedGroup` as part of the configurations Callback functions are optional. If no validator function is specified for a certain proposal type, any semantically valid proposal will be accepted. Validator fucntions returan a `bool`, depending on whether the proposal is accepted by the application policy."],["ManagedGroupConfig","Specifies the configuration parameters for a managed group"],["MlsGroup",""],["ReuseGuard",""],["Secret","A struct to contain secrets. This is to provide better visibility into where and how secrets are used and to avoid passing secrets in their raw representation."],["Signature",""],["SignatureKeypair",""],["SignaturePrivateKey",""],["SignaturePublicKey",""],["Welcome",""]],"trait":[["Codec",""]]});