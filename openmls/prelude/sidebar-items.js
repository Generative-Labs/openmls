initSidebarItems({"enum":[["CapabilitiesExtensionError",""],["CredentialError",""],["CredentialType","Enum for Credential Types. We only need this for encoding/decoding."],["Extension","An extension can be one of the following elements."],["ExtensionError",""],["ExtensionType","Extension types"],["GroupEvent","Group event that occured while processing messages in `ManagedGroup`."],["HandshakeMessageFormat","Defines whether handshake messages (Proposals & Commits) are encrypted. Application are always encrypted regardless. `Plaintext`: Handshake messages are returned as MlsPlaintext messages `Ciphertext`: Handshake messages are returned as MlsCiphertext messages"],["InvalidExtensionError",""],["InvalidMessageError",""],["KeyPackageError",""],["KeyPackageIdError",""],["LifetimeExtensionError",""],["ManagedGroupError",""],["MlsCredentialType","This enum contains the different available credentials."],["MlsMessageOut","Unified message type for output by the managed API"],["ParentHashError",""],["Psk","PSK enum that can contain the different PSK types"],["PskType","Type of PSK."],["RatchetTreeError",""],["Removal","This enum lists the 4 different variants of a removal, depending on who the remover and who the leaver is."]],"fn":[["_print_tree",""]],"mod":[["errors","Extension errors."],["errors","Key Package errors"]],"struct":[["AddProposal",""],["BasicCredential",""],["BranchPsk","Branch PSK"],["CapabilitiesExtension",""],["Certificate","Struct containing an X509 certificate chain, as per Spec."],["Credential","Struct containing MLS credential data, where the data depends on the type."],["CredentialBundle","This struct contains a credential and the corresponding private key."],["ExternalPsk","External PSK."],["ExternalPskBundle","External PSK Bundle. This contains the secret part of the PSK as well as the public part that is used as a marker for injection into the key schedule."],["KeyIdExtension",""],["KeyPackage",""],["KeyPackageBundle",""],["KeyPackageBundlePayload",""],["KeyPackagePayload","The unsigned payload of a key package. Any modification must happen on this unsigned struct. Use `sign` to get a signed key package."],["LifetimeExtension","The lifetime extension holds a not before and a not after time measured in seconds since the Unix epoch (1970-01-01T00:00:00Z)."],["ManagedGroup","A `ManagedGroup` represents an [MlsGroup] with an easier, high-level API designed to be used in production. The API exposes high level functions to manage a group by adding/removing members, get the current member list, etc."],["ManagedGroupCallbacks",""],["ManagedGroupConfig","Specifies the configuration parameters for a managed group"],["MlsGroup",""],["PreSharedKeyId","A `PreSharedKeyID` is used to uniquely identify the PSKs that get injected in the key schedule."],["PreSharedKeyProposal","Preshared Key proposal 11.1.4 struct { PreSharedKeyID psk; } PreSharedKey;"],["PreSharedKeys","`PreSharedKeys` is a vector of `PreSharedKeyID`s. struct { PreSharedKeyID psks<0..2^16-1>; } PreSharedKeys;"],["RatchetTreeExtension",""],["ReInitProposal","ReInit proposal 11.1.5 struct { opaque group_id<0..255>; ProtocolVersion version; CipherSuite cipher_suite; Extension extensions<0..2^32-1>; } ReInit;"],["ReinitPsk","ReInit PSK."],["RemoveProposal",""],["UpdatePolicy","Specifies in which intervals the own leaf node should be updated"],["UpdateProposal",""]],"trait":[["TlsDeserializeTrait","The `Deserialize` trait defines functions to deserialize a byte slice to a struct or enum."],["TlsSerializeTrait","The `Serialize` trait provides functions to serialize a struct or enum."],["TlsSizeTrait","The `Size` trait needs to be implemented by any struct that should be efficiently serialized. This allows to collect the length of a serialized structure before allocating memory."]]});