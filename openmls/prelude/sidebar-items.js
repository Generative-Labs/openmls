initSidebarItems({"enum":[["ApplyCommitError",""],["CiphersuiteName",""],["CodecError",""],["ContentType",""],["CreateCommitError",""],["CredentialError",""],["CredentialType","Enum for Credential Types. We only need this for encoding/decoding."],["ExtensionType","Extension typesIANA registrations"],["GroupError",""],["HandshakeMessageFormat","Defines whether handshake messages (Proposals & Commits) are encrypted. Application are always encrypted regardless. `Plaintext`: Handshake messages are returned as MLSPlaintext messages `Ciphertext`: Handshake messages are returned as MLSCiphertext messages"],["InvalidMessageError",""],["MLSCiphertextError",""],["MLSCredentialType","This enum contains the different available credentials."],["MLSPlaintextContentType",""],["MLSPlaintextError",""],["ManagedGroupError",""],["ProtocolVersion","Protocol VersionKey Packages"],["Removal","This enum lists the 4 different variants of a removal, depending on who the remover and who the leaver is."],["VecSize",""],["WelcomeError",""]],"fn":[["_print_tree",""],["decode_vec",""],["encode_vec",""]],"mod":[["errors","Config errorsA `ConfigError` is thrown when either the configuration itself is invalid or inconsistent, or if an MLS configuration is being used that is not supported."],["errors","Extension errors.An `ExtensionError` is thrown when an extension is invalid (for example when decoding from raw bytes) or when a check on an extension fails."],["errors","Framing errors.`MLSPlaintextError` and `MLSCiphertextError` are thrown on errors handling `MLSPlaintext` and `MLSCiphertext`."],["errors","Key Package errors`KeyPackageError` are thrown on errors handling `KeyPackage`s and `KeyPackageBundle`s."],["sender","Section  9. Message Framing"]],"struct":[["AddProposal",""],["AeadKey",""],["AeadNonce",""],["BasicCredential",""],["CapabilitiesExtension",""],["Certificate","Struct containing an X509 certificate chain, as per Spec."],["Ciphersuite",""],["Config","OpenMLS ConfigurationThis is the global configuration for OpenMLS."],["Credential","Struct containing MLS credential data, where the data depends on the type."],["CredentialBundle","This struct contains a credential and the corresponding private key."],["Cursor",""],["ExtensionStruct","Extension structAn extension has an `ExtensionType` and an opaque payload (byte vector). This is only used for encoding and decoding."],["GroupConfig","Configuration for an MLS group."],["GroupId",""],["HpkeCiphertext","7.7. Update Paths"],["KeyIDExtension",""],["KeyPackage",""],["KeyPackageBundle",""],["LeafIndex",""],["LifetimeExtension","The lifetime extension holds a not before and a not after time measured in seconds since the Unix epoch (1970-01-01T00:00:00Z)."],["MLSCiphertext",""],["MLSPlaintext",""],["ManagedGroup","A `ManagedGroup` represents an [MlsGroup] with an easier, high-level API designed to be used in production. The API exposes high level functions to manage a group by adding/removing members, get the current member list, etc."],["ManagedGroupCallbacks","Collection of callback functions that are passed to a `ManagedGroup` as part of the configurations Callback functions are optional. If no validator function is specified for a certain proposal type, any semantically valid proposal will be accepted. Validator functions return a `bool`, depending on whether the proposal is accepted by the application policy."],["ManagedGroupConfig","Specifies the configuration parameters for a managed group"],["MlsGroup",""],["RemoveProposal",""],["ReuseGuard",""],["Secret","A struct to contain secrets. This is to provide better visibility into where and how secrets are used and to avoid passing secrets in their raw representation."],["Sender",""],["Signature",""],["SignatureKeypair",""],["SignaturePrivateKey",""],["SignaturePublicKey",""],["UpdatePolicy","Specifies in which intervals the own leaf node should be updated"],["UpdateProposal",""],["Welcome","Welcome Messages"]],"trait":[["Codec",""],["Extension","ExtensionThis trait defines functions to interact with an extension."],["ExtensionHelper",""]]});